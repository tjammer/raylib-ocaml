{
  "structs": [
    {
      "name": "Vector2",
      "description": "",
      "fields": [
        {
          "name": "x",
          "type": "float",
          "description": ""
        },
        {
          "name": "y",
          "type": "float",
          "description": ""
        }
      ]
    },
    {
      "name": "Vector3",
      "description": "",
      "fields": [
        {
          "name": "x",
          "type": "float",
          "description": ""
        },
        {
          "name": "y",
          "type": "float",
          "description": ""
        },
        {
          "name": "z",
          "type": "float",
          "description": ""
        }
      ]
    },
    {
      "name": "Vector4",
      "description": "",
      "fields": [
        {
          "name": "x",
          "type": "float",
          "description": ""
        },
        {
          "name": "y",
          "type": "float",
          "description": ""
        },
        {
          "name": "z",
          "type": "float",
          "description": ""
        },
        {
          "name": "w",
          "type": "float",
          "description": ""
        }
      ]
    },
    {
      "name": "Matrix",
      "description": "",
      "fields": [
        {
          "name": "m0, m4, m8, m12",
          "type": "float",
          "description": ""
        },
        {
          "name": "m1, m5, m9, m13",
          "type": "float",
          "description": ""
        },
        {
          "name": "m2, m6, m10, m14",
          "type": "float",
          "description": ""
        },
        {
          "name": "m3, m7, m11, m15",
          "type": "float",
          "description": ""
        }
      ]
    },
    {
      "name": "Color",
      "description": "",
      "fields": [
        {
          "name": "r",
          "type": "unsigned char",
          "description": ""
        },
        {
          "name": "g",
          "type": "unsigned char",
          "description": ""
        },
        {
          "name": "b",
          "type": "unsigned char",
          "description": ""
        },
        {
          "name": "a",
          "type": "unsigned char",
          "description": ""
        }
      ]
    },
    {
      "name": "Rectangle",
      "description": "",
      "fields": [
        {
          "name": "x",
          "type": "float",
          "description": ""
        },
        {
          "name": "y",
          "type": "float",
          "description": ""
        },
        {
          "name": "width",
          "type": "float",
          "description": ""
        },
        {
          "name": "height",
          "type": "float",
          "description": ""
        }
      ]
    },
    {
      "name": "Image",
      "description": "",
      "fields": [
        {
          "name": "data",
          "type": "void *",
          "description": "Image raw data"
        },
        {
          "name": "width",
          "type": "int",
          "description": "Image base width"
        },
        {
          "name": "height",
          "type": "int",
          "description": "Image base height"
        },
        {
          "name": "mipmaps",
          "type": "int",
          "description": "Mipmap levels, 1 by default"
        },
        {
          "name": "format",
          "type": "int",
          "description": "Data format (PixelFormat type)"
        }
      ]
    },
    {
      "name": "Texture",
      "description": "",
      "fields": [
        {
          "name": "id",
          "type": "unsigned int",
          "description": "OpenGL texture id"
        },
        {
          "name": "width",
          "type": "int",
          "description": "Texture base width"
        },
        {
          "name": "height",
          "type": "int",
          "description": "Texture base height"
        },
        {
          "name": "mipmaps",
          "type": "int",
          "description": "Mipmap levels, 1 by default"
        },
        {
          "name": "format",
          "type": "int",
          "description": "Data format (PixelFormat type)"
        }
      ]
    },
    {
      "name": "RenderTexture",
      "description": "",
      "fields": [
        {
          "name": "id",
          "type": "unsigned int",
          "description": "OpenGL framebuffer object id"
        },
        {
          "name": "texture",
          "type": "Texture",
          "description": "Color buffer attachment texture"
        },
        {
          "name": "depth",
          "type": "Texture",
          "description": "Depth buffer attachment texture"
        }
      ]
    },
    {
      "name": "NPatchInfo",
      "description": "",
      "fields": [
        {
          "name": "source",
          "type": "Rectangle",
          "description": "Texture source rectangle"
        },
        {
          "name": "left",
          "type": "int",
          "description": "Left border offset"
        },
        {
          "name": "top",
          "type": "int",
          "description": "Top border offset"
        },
        {
          "name": "right",
          "type": "int",
          "description": "Right border offset"
        },
        {
          "name": "bottom",
          "type": "int",
          "description": "Bottom border offset"
        },
        {
          "name": "layout",
          "type": "int",
          "description": "Layout of the n-patch: 3x3, 1x3 or 3x1"
        }
      ]
    },
    {
      "name": "CharInfo",
      "description": "",
      "fields": [
        {
          "name": "value",
          "type": "int",
          "description": "Character value (Unicode)"
        },
        {
          "name": "offsetX",
          "type": "int",
          "description": "Character offset X when drawing"
        },
        {
          "name": "offsetY",
          "type": "int",
          "description": "Character offset Y when drawing"
        },
        {
          "name": "advanceX",
          "type": "int",
          "description": "Character advance position X"
        },
        {
          "name": "image",
          "type": "Image",
          "description": "Character image data"
        }
      ]
    },
    {
      "name": "Font",
      "description": "",
      "fields": [
        {
          "name": "baseSize",
          "type": "int",
          "description": "Base size (default chars height)"
        },
        {
          "name": "charsCount",
          "type": "int",
          "description": "Number of characters"
        },
        {
          "name": "charsPadding",
          "type": "int",
          "description": "Padding around the chars"
        },
        {
          "name": "texture",
          "type": "Texture2D",
          "description": "Characters texture atlas"
        },
        {
          "name": "recs",
          "type": "Rectangle *",
          "description": "Characters rectangles in texture"
        },
        {
          "name": "chars",
          "type": "CharInfo *",
          "description": "Characters info data"
        }
      ]
    },
    {
      "name": "Camera3D",
      "description": "",
      "fields": [
        {
          "name": "position",
          "type": "Vector3",
          "description": "Camera position"
        },
        {
          "name": "target",
          "type": "Vector3",
          "description": "Camera target it looks-at"
        },
        {
          "name": "up",
          "type": "Vector3",
          "description": "Camera up vector (rotation over its axis)"
        },
        {
          "name": "fovy",
          "type": "float",
          "description": "Camera field-of-view apperture in Y (degrees) in perspective, used as near plane width in orthographic"
        },
        {
          "name": "projection",
          "type": "int",
          "description": "Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC"
        }
      ]
    },
    {
      "name": "Camera2D",
      "description": "",
      "fields": [
        {
          "name": "offset",
          "type": "Vector2",
          "description": "Camera offset (displacement from target)"
        },
        {
          "name": "target",
          "type": "Vector2",
          "description": "Camera target (rotation and zoom origin)"
        },
        {
          "name": "rotation",
          "type": "float",
          "description": "Camera rotation in degrees"
        },
        {
          "name": "zoom",
          "type": "float",
          "description": "Camera zoom (scaling), should be 1.0f by default"
        }
      ]
    },
    {
      "name": "Mesh",
      "description": "",
      "fields": [
        {
          "name": "vertexCount",
          "type": "int",
          "description": "Number of vertices stored in arrays"
        },
        {
          "name": "triangleCount",
          "type": "int",
          "description": "Number of triangles stored (indexed or not)"
        },
        {
          "name": "vertices",
          "type": "float *",
          "description": "Vertex position (XYZ - 3 components per vertex) (shader-location = 0)"
        },
        {
          "name": "texcoords",
          "type": "float *",
          "description": "Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)"
        },
        {
          "name": "texcoords2",
          "type": "float *",
          "description": "Vertex second texture coordinates (useful for lightmaps) (shader-location = 5)"
        },
        {
          "name": "normals",
          "type": "float *",
          "description": "Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)"
        },
        {
          "name": "tangents",
          "type": "float *",
          "description": "Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)"
        },
        {
          "name": "colors",
          "type": "unsigned char *",
          "description": "Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)"
        },
        {
          "name": "indices",
          "type": "unsigned short *",
          "description": "Vertex indices (in case vertex data comes indexed)"
        },
        {
          "name": "animVertices",
          "type": "float *",
          "description": "Animated vertex positions (after bones transformations)"
        },
        {
          "name": "animNormals",
          "type": "float *",
          "description": "Animated normals (after bones transformations)"
        },
        {
          "name": "boneIds",
          "type": "int *",
          "description": "Vertex bone ids, up to 4 bones influence by vertex (skinning)"
        },
        {
          "name": "boneWeights",
          "type": "float *",
          "description": "Vertex bone weight, up to 4 bones influence by vertex (skinning)"
        },
        {
          "name": "vaoId",
          "type": "unsigned int",
          "description": "OpenGL Vertex Array Object id"
        },
        {
          "name": "vboId",
          "type": "unsigned int *",
          "description": "OpenGL Vertex Buffer Objects id (default vertex data)"
        }
      ]
    },
    {
      "name": "Shader",
      "description": "",
      "fields": [
        {
          "name": "id",
          "type": "unsigned int",
          "description": "Shader program id"
        },
        {
          "name": "locs",
          "type": "int *",
          "description": "Shader locations array (MAX_SHADER_LOCATIONS)"
        }
      ]
    },
    {
      "name": "MaterialMap",
      "description": "",
      "fields": [
        {
          "name": "texture",
          "type": "Texture2D",
          "description": "Material map texture"
        },
        {
          "name": "color",
          "type": "Color",
          "description": "Material map color"
        },
        {
          "name": "value",
          "type": "float",
          "description": "Material map value"
        }
      ]
    },
    {
      "name": "Material",
      "description": "",
      "fields": [
        {
          "name": "shader",
          "type": "Shader",
          "description": "Material shader"
        },
        {
          "name": "maps",
          "type": "MaterialMap *",
          "description": "Material maps array (MAX_MATERIAL_MAPS)"
        },
        {
          "name": "params[4]",
          "type": "float",
          "description": "Material generic parameters (if required)"
        }
      ]
    },
    {
      "name": "Transform",
      "description": "",
      "fields": [
        {
          "name": "translation",
          "type": "Vector3",
          "description": "Translation"
        },
        {
          "name": "rotation",
          "type": "Quaternion",
          "description": "Rotation"
        },
        {
          "name": "scale",
          "type": "Vector3",
          "description": "Scale"
        }
      ]
    },
    {
      "name": "BoneInfo",
      "description": "",
      "fields": [
        {
          "name": "name[32]",
          "type": "char",
          "description": "Bone name"
        },
        {
          "name": "parent",
          "type": "int",
          "description": "Bone parent"
        }
      ]
    },
    {
      "name": "Model",
      "description": "",
      "fields": [
        {
          "name": "transform",
          "type": "Matrix",
          "description": "Local transform matrix"
        },
        {
          "name": "meshCount",
          "type": "int",
          "description": "Number of meshes"
        },
        {
          "name": "materialCount",
          "type": "int",
          "description": "Number of materials"
        },
        {
          "name": "meshes",
          "type": "Mesh *",
          "description": "Meshes array"
        },
        {
          "name": "materials",
          "type": "Material *",
          "description": "Materials array"
        },
        {
          "name": "meshMaterial",
          "type": "int *",
          "description": "Mesh material number"
        },
        {
          "name": "boneCount",
          "type": "int",
          "description": "Number of bones"
        },
        {
          "name": "bones",
          "type": "BoneInfo *",
          "description": "Bones information (skeleton)"
        },
        {
          "name": "bindPose",
          "type": "Transform *",
          "description": "Bones base transformation (pose)"
        }
      ]
    },
    {
      "name": "ModelAnimation",
      "description": "",
      "fields": [
        {
          "name": "boneCount",
          "type": "int",
          "description": "Number of bones"
        },
        {
          "name": "frameCount",
          "type": "int",
          "description": "Number of animation frames"
        },
        {
          "name": "bones",
          "type": "BoneInfo *",
          "description": "Bones information (skeleton)"
        },
        {
          "name": "framePoses",
          "type": "Transform **",
          "description": "Poses array by frame"
        }
      ]
    },
    {
      "name": "Ray",
      "description": "",
      "fields": [
        {
          "name": "position",
          "type": "Vector3",
          "description": "Ray position (origin)"
        },
        {
          "name": "direction",
          "type": "Vector3",
          "description": "Ray direction"
        }
      ]
    },
    {
      "name": "RayHitInfo",
      "description": "",
      "fields": [
        {
          "name": "hit",
          "type": "bool",
          "description": "Did the ray hit something?"
        },
        {
          "name": "distance",
          "type": "float",
          "description": "Distance to nearest hit"
        },
        {
          "name": "position",
          "type": "Vector3",
          "description": "Position of nearest hit"
        },
        {
          "name": "normal",
          "type": "Vector3",
          "description": "Surface normal of hit"
        }
      ]
    },
    {
      "name": "BoundingBox",
      "description": "",
      "fields": [
        {
          "name": "min",
          "type": "Vector3",
          "description": "Minimum vertex box-corner"
        },
        {
          "name": "max",
          "type": "Vector3",
          "description": "Maximum vertex box-corner"
        }
      ]
    },
    {
      "name": "Wave",
      "description": "",
      "fields": [
        {
          "name": "sampleCount",
          "type": "unsigned int",
          "description": "Total number of samples"
        },
        {
          "name": "sampleRate",
          "type": "unsigned int",
          "description": "Frequency (samples per second)"
        },
        {
          "name": "sampleSize",
          "type": "unsigned int",
          "description": "Bit depth (bits per sample): 8, 16, 32 (24 not supported)"
        },
        {
          "name": "channels",
          "type": "unsigned int",
          "description": "Number of channels (1-mono, 2-stereo)"
        },
        {
          "name": "data",
          "type": "void *",
          "description": "Buffer data pointer"
        }
      ]
    },
    {
      "name": "AudioStream",
      "description": "",
      "fields": [
        {
          "name": "buffer",
          "type": "rAudioBuffer *",
          "description": "Pointer to internal data used by the audio system"
        },
        {
          "name": "sampleRate",
          "type": "unsigned int",
          "description": "Frequency (samples per second)"
        },
        {
          "name": "sampleSize",
          "type": "unsigned int",
          "description": "Bit depth (bits per sample): 8, 16, 32 (24 not supported)"
        },
        {
          "name": "channels",
          "type": "unsigned int",
          "description": "Number of channels (1-mono, 2-stereo)"
        }
      ]
    },
    {
      "name": "Sound",
      "description": "",
      "fields": [
        {
          "name": "stream",
          "type": "AudioStream",
          "description": "Audio stream"
        },
        {
          "name": "sampleCount",
          "type": "unsigned int",
          "description": "Total number of samples"
        }
      ]
    },
    {
      "name": "Music",
      "description": "",
      "fields": [
        {
          "name": "stream",
          "type": "AudioStream",
          "description": "Audio stream"
        },
        {
          "name": "sampleCount",
          "type": "unsigned int",
          "description": "Total number of samples"
        },
        {
          "name": "looping",
          "type": "bool",
          "description": "Music looping enable"
        },
        {
          "name": "ctxType",
          "type": "int",
          "description": "Type of music context (audio filetype)"
        },
        {
          "name": "ctxData",
          "type": "void *",
          "description": "Audio context data, depends on type"
        }
      ]
    },
    {
      "name": "VrDeviceInfo",
      "description": "",
      "fields": [
        {
          "name": "hResolution",
          "type": "int",
          "description": "Horizontal resolution in pixels"
        },
        {
          "name": "vResolution",
          "type": "int",
          "description": "Vertical resolution in pixels"
        },
        {
          "name": "hScreenSize",
          "type": "float",
          "description": "Horizontal size in meters"
        },
        {
          "name": "vScreenSize",
          "type": "float",
          "description": "Vertical size in meters"
        },
        {
          "name": "vScreenCenter",
          "type": "float",
          "description": "Screen center in meters"
        },
        {
          "name": "eyeToScreenDistance",
          "type": "float",
          "description": "Distance between eye and display in meters"
        },
        {
          "name": "lensSeparationDistance",
          "type": "float",
          "description": "Lens separation distance in meters"
        },
        {
          "name": "interpupillaryDistance",
          "type": "float",
          "description": "IPD (distance between pupils) in meters"
        },
        {
          "name": "lensDistortionValues[4]",
          "type": "float",
          "description": "Lens distortion constant parameters"
        },
        {
          "name": "chromaAbCorrection[4]",
          "type": "float",
          "description": "Chromatic aberration correction parameters"
        }
      ]
    },
    {
      "name": "VrStereoConfig",
      "description": "",
      "fields": [
        {
          "name": "projection[2]",
          "type": "Matrix",
          "description": "VR projection matrices (per eye)"
        },
        {
          "name": "viewOffset[2]",
          "type": "Matrix",
          "description": "VR view offset matrices (per eye)"
        },
        {
          "name": "leftLensCenter[2]",
          "type": "float",
          "description": "VR left lens center"
        },
        {
          "name": "rightLensCenter[2]",
          "type": "float",
          "description": "VR right lens center"
        },
        {
          "name": "leftScreenCenter[2]",
          "type": "float",
          "description": "VR left screen center"
        },
        {
          "name": "rightScreenCenter[2]",
          "type": "float",
          "description": "VR right screen center"
        },
        {
          "name": "scale[2]",
          "type": "float",
          "description": "VR distortion scale"
        },
        {
          "name": "scaleIn[2]",
          "type": "float",
          "description": "VR distortion scale in"
        }
      ]
    }
  ],
  "enums": [
    {
      "name": "Vector2",
      "description": "",
      "values": [
      ]
    },
    {
      "name": "ConfigFlags",
      "description": "",
      "values": [
        {
          "name": "FLAG_VSYNC_HINT",
          "value": 64,
          "description": ""
        },
        {
          "name": "FLAG_FULLSCREEN_MODE",
          "value": 2,
          "description": ""
        },
        {
          "name": "FLAG_WINDOW_RESIZABLE",
          "value": 4,
          "description": ""
        },
        {
          "name": "FLAG_WINDOW_UNDECORATED",
          "value": 8,
          "description": ""
        },
        {
          "name": "FLAG_WINDOW_HIDDEN",
          "value": 128,
          "description": ""
        },
        {
          "name": "FLAG_WINDOW_MINIMIZED",
          "value": 512,
          "description": ""
        },
        {
          "name": "FLAG_WINDOW_MAXIMIZED",
          "value": 1024,
          "description": ""
        },
        {
          "name": "FLAG_WINDOW_UNFOCUSED",
          "value": 2048,
          "description": ""
        },
        {
          "name": "FLAG_WINDOW_TOPMOST",
          "value": 4096,
          "description": ""
        },
        {
          "name": "FLAG_WINDOW_ALWAYS_RUN",
          "value": 256,
          "description": ""
        },
        {
          "name": "FLAG_WINDOW_TRANSPARENT",
          "value": 16,
          "description": ""
        },
        {
          "name": "FLAG_WINDOW_HIGHDPI",
          "value": 8192,
          "description": ""
        },
        {
          "name": "FLAG_MSAA_4X_HINT",
          "value": 32,
          "description": ""
        },
        {
          "name": "FLAG_INTERLACED_HINT",
          "value": 65536,
          "description": ""
        }
      ]
    },
    {
      "name": "TraceLogLevel",
      "description": "",
      "values": [
        {
          "name": "LOG_ALL",
          "value": 0,
          "description": ""
        },
        {
          "name": "LOG_TRACE",
          "value": 1,
          "description": ""
        },
        {
          "name": "LOG_DEBUG",
          "value": 2,
          "description": ""
        },
        {
          "name": "LOG_INFO",
          "value": 3,
          "description": ""
        },
        {
          "name": "LOG_WARNING",
          "value": 4,
          "description": ""
        },
        {
          "name": "LOG_ERROR",
          "value": 5,
          "description": ""
        },
        {
          "name": "LOG_FATAL",
          "value": 6,
          "description": ""
        },
        {
          "name": "LOG_NONE",
          "value": 7,
          "description": ""
        }
      ]
    },
    {
      "name": "KeyboardKey",
      "description": "",
      "values": [
        {
          "name": "KEY_NULL",
          "value": 0,
          "description": ""
        },
        {
          "name": "KEY_APOSTROPHE",
          "value": 39,
          "description": ""
        },
        {
          "name": "KEY_COMMA",
          "value": 44,
          "description": ""
        },
        {
          "name": "KEY_MINUS",
          "value": 45,
          "description": ""
        },
        {
          "name": "KEY_PERIOD",
          "value": 46,
          "description": ""
        },
        {
          "name": "KEY_SLASH",
          "value": 47,
          "description": ""
        },
        {
          "name": "KEY_ZERO",
          "value": 48,
          "description": ""
        },
        {
          "name": "KEY_ONE",
          "value": 49,
          "description": ""
        },
        {
          "name": "KEY_TWO",
          "value": 50,
          "description": ""
        },
        {
          "name": "KEY_THREE",
          "value": 51,
          "description": ""
        },
        {
          "name": "KEY_FOUR",
          "value": 52,
          "description": ""
        },
        {
          "name": "KEY_FIVE",
          "value": 53,
          "description": ""
        },
        {
          "name": "KEY_SIX",
          "value": 54,
          "description": ""
        },
        {
          "name": "KEY_SEVEN",
          "value": 55,
          "description": ""
        },
        {
          "name": "KEY_EIGHT",
          "value": 56,
          "description": ""
        },
        {
          "name": "KEY_NINE",
          "value": 57,
          "description": ""
        },
        {
          "name": "KEY_SEMICOLON",
          "value": 59,
          "description": ""
        },
        {
          "name": "KEY_EQUAL",
          "value": 61,
          "description": ""
        },
        {
          "name": "KEY_A",
          "value": 65,
          "description": ""
        },
        {
          "name": "KEY_B",
          "value": 66,
          "description": ""
        },
        {
          "name": "KEY_C",
          "value": 67,
          "description": ""
        },
        {
          "name": "KEY_D",
          "value": 68,
          "description": ""
        },
        {
          "name": "KEY_E",
          "value": 69,
          "description": ""
        },
        {
          "name": "KEY_F",
          "value": 70,
          "description": ""
        },
        {
          "name": "KEY_G",
          "value": 71,
          "description": ""
        },
        {
          "name": "KEY_H",
          "value": 72,
          "description": ""
        },
        {
          "name": "KEY_I",
          "value": 73,
          "description": ""
        },
        {
          "name": "KEY_J",
          "value": 74,
          "description": ""
        },
        {
          "name": "KEY_K",
          "value": 75,
          "description": ""
        },
        {
          "name": "KEY_L",
          "value": 76,
          "description": ""
        },
        {
          "name": "KEY_M",
          "value": 77,
          "description": ""
        },
        {
          "name": "KEY_N",
          "value": 78,
          "description": ""
        },
        {
          "name": "KEY_O",
          "value": 79,
          "description": ""
        },
        {
          "name": "KEY_P",
          "value": 80,
          "description": ""
        },
        {
          "name": "KEY_Q",
          "value": 81,
          "description": ""
        },
        {
          "name": "KEY_R",
          "value": 82,
          "description": ""
        },
        {
          "name": "KEY_S",
          "value": 83,
          "description": ""
        },
        {
          "name": "KEY_T",
          "value": 84,
          "description": ""
        },
        {
          "name": "KEY_U",
          "value": 85,
          "description": ""
        },
        {
          "name": "KEY_V",
          "value": 86,
          "description": ""
        },
        {
          "name": "KEY_W",
          "value": 87,
          "description": ""
        },
        {
          "name": "KEY_X",
          "value": 88,
          "description": ""
        },
        {
          "name": "KEY_Y",
          "value": 89,
          "description": ""
        },
        {
          "name": "KEY_Z",
          "value": 90,
          "description": ""
        },
        {
          "name": "KEY_SPACE",
          "value": 32,
          "description": ""
        },
        {
          "name": "KEY_ESCAPE",
          "value": 256,
          "description": ""
        },
        {
          "name": "KEY_ENTER",
          "value": 257,
          "description": ""
        },
        {
          "name": "KEY_TAB",
          "value": 258,
          "description": ""
        },
        {
          "name": "KEY_BACKSPACE",
          "value": 259,
          "description": ""
        },
        {
          "name": "KEY_INSERT",
          "value": 260,
          "description": ""
        },
        {
          "name": "KEY_DELETE",
          "value": 261,
          "description": ""
        },
        {
          "name": "KEY_RIGHT",
          "value": 262,
          "description": ""
        },
        {
          "name": "KEY_LEFT",
          "value": 263,
          "description": ""
        },
        {
          "name": "KEY_DOWN",
          "value": 264,
          "description": ""
        },
        {
          "name": "KEY_UP",
          "value": 265,
          "description": ""
        },
        {
          "name": "KEY_PAGE_UP",
          "value": 266,
          "description": ""
        },
        {
          "name": "KEY_PAGE_DOWN",
          "value": 267,
          "description": ""
        },
        {
          "name": "KEY_HOME",
          "value": 268,
          "description": ""
        },
        {
          "name": "KEY_END",
          "value": 269,
          "description": ""
        },
        {
          "name": "KEY_CAPS_LOCK",
          "value": 280,
          "description": ""
        },
        {
          "name": "KEY_SCROLL_LOCK",
          "value": 281,
          "description": ""
        },
        {
          "name": "KEY_NUM_LOCK",
          "value": 282,
          "description": ""
        },
        {
          "name": "KEY_PRINT_SCREEN",
          "value": 283,
          "description": ""
        },
        {
          "name": "KEY_PAUSE",
          "value": 284,
          "description": ""
        },
        {
          "name": "KEY_F1",
          "value": 290,
          "description": ""
        },
        {
          "name": "KEY_F2",
          "value": 291,
          "description": ""
        },
        {
          "name": "KEY_F3",
          "value": 292,
          "description": ""
        },
        {
          "name": "KEY_F4",
          "value": 293,
          "description": ""
        },
        {
          "name": "KEY_F5",
          "value": 294,
          "description": ""
        },
        {
          "name": "KEY_F6",
          "value": 295,
          "description": ""
        },
        {
          "name": "KEY_F7",
          "value": 296,
          "description": ""
        },
        {
          "name": "KEY_F8",
          "value": 297,
          "description": ""
        },
        {
          "name": "KEY_F9",
          "value": 298,
          "description": ""
        },
        {
          "name": "KEY_F10",
          "value": 299,
          "description": ""
        },
        {
          "name": "KEY_F11",
          "value": 300,
          "description": ""
        },
        {
          "name": "KEY_F12",
          "value": 301,
          "description": ""
        },
        {
          "name": "KEY_LEFT_SHIFT",
          "value": 340,
          "description": ""
        },
        {
          "name": "KEY_LEFT_CONTROL",
          "value": 341,
          "description": ""
        },
        {
          "name": "KEY_LEFT_ALT",
          "value": 342,
          "description": ""
        },
        {
          "name": "KEY_LEFT_SUPER",
          "value": 343,
          "description": ""
        },
        {
          "name": "KEY_RIGHT_SHIFT",
          "value": 344,
          "description": ""
        },
        {
          "name": "KEY_RIGHT_CONTROL",
          "value": 345,
          "description": ""
        },
        {
          "name": "KEY_RIGHT_ALT",
          "value": 346,
          "description": ""
        },
        {
          "name": "KEY_RIGHT_SUPER",
          "value": 347,
          "description": ""
        },
        {
          "name": "KEY_KB_MENU",
          "value": 348,
          "description": ""
        },
        {
          "name": "KEY_LEFT_BRACKET",
          "value": 91,
          "description": ""
        },
        {
          "name": "KEY_BACKSLASH",
          "value": 92,
          "description": ""
        },
        {
          "name": "KEY_RIGHT_BRACKET",
          "value": 93,
          "description": ""
        },
        {
          "name": "KEY_GRAVE",
          "value": 96,
          "description": ""
        },
        {
          "name": "KEY_KP_0",
          "value": 320,
          "description": ""
        },
        {
          "name": "KEY_KP_1",
          "value": 321,
          "description": ""
        },
        {
          "name": "KEY_KP_2",
          "value": 322,
          "description": ""
        },
        {
          "name": "KEY_KP_3",
          "value": 323,
          "description": ""
        },
        {
          "name": "KEY_KP_4",
          "value": 324,
          "description": ""
        },
        {
          "name": "KEY_KP_5",
          "value": 325,
          "description": ""
        },
        {
          "name": "KEY_KP_6",
          "value": 326,
          "description": ""
        },
        {
          "name": "KEY_KP_7",
          "value": 327,
          "description": ""
        },
        {
          "name": "KEY_KP_8",
          "value": 328,
          "description": ""
        },
        {
          "name": "KEY_KP_9",
          "value": 329,
          "description": ""
        },
        {
          "name": "KEY_KP_DECIMAL",
          "value": 330,
          "description": ""
        },
        {
          "name": "KEY_KP_DIVIDE",
          "value": 331,
          "description": ""
        },
        {
          "name": "KEY_KP_MULTIPLY",
          "value": 332,
          "description": ""
        },
        {
          "name": "KEY_KP_SUBTRACT",
          "value": 333,
          "description": ""
        },
        {
          "name": "KEY_KP_ADD",
          "value": 334,
          "description": ""
        },
        {
          "name": "KEY_KP_ENTER",
          "value": 335,
          "description": ""
        },
        {
          "name": "KEY_KP_EQUAL",
          "value": 336,
          "description": ""
        },
        {
          "name": "KEY_BACK",
          "value": 4,
          "description": ""
        },
        {
          "name": "KEY_MENU",
          "value": 82,
          "description": ""
        },
        {
          "name": "KEY_VOLUME_UP",
          "value": 24,
          "description": ""
        },
        {
          "name": "KEY_VOLUME_DOWN",
          "value": 25,
          "description": ""
        }
      ]
    },
    {
      "name": "MouseButton",
      "description": "",
      "values": [
        {
          "name": "MOUSE_LEFT_BUTTON",
          "value": 0,
          "description": ""
        },
        {
          "name": "MOUSE_RIGHT_BUTTON",
          "value": 1,
          "description": ""
        },
        {
          "name": "MOUSE_MIDDLE_BUTTON",
          "value": 2,
          "description": ""
        }
      ]
    },
    {
      "name": "MouseCursor",
      "description": "",
      "values": [
        {
          "name": "MOUSE_CURSOR_DEFAULT",
          "value": 0,
          "description": ""
        },
        {
          "name": "MOUSE_CURSOR_ARROW",
          "value": 1,
          "description": ""
        },
        {
          "name": "MOUSE_CURSOR_IBEAM",
          "value": 2,
          "description": ""
        },
        {
          "name": "MOUSE_CURSOR_CROSSHAIR",
          "value": 3,
          "description": ""
        },
        {
          "name": "MOUSE_CURSOR_POINTING_HAND",
          "value": 4,
          "description": ""
        },
        {
          "name": "MOUSE_CURSOR_RESIZE_EW",
          "value": 5,
          "description": ""
        },
        {
          "name": "MOUSE_CURSOR_RESIZE_NS",
          "value": 6,
          "description": ""
        },
        {
          "name": "MOUSE_CURSOR_RESIZE_NWSE",
          "value": 7,
          "description": ""
        },
        {
          "name": "MOUSE_CURSOR_RESIZE_NESW",
          "value": 8,
          "description": ""
        },
        {
          "name": "MOUSE_CURSOR_RESIZE_ALL",
          "value": 9,
          "description": ""
        },
        {
          "name": "MOUSE_CURSOR_NOT_ALLOWED",
          "value": 10,
          "description": ""
        }
      ]
    },
    {
      "name": "GamepadButton",
      "description": "",
      "values": [
        {
          "name": "GAMEPAD_BUTTON_UNKNOWN",
          "value": 0,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_FACE_UP",
          "value": 1,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_FACE_RIGHT",
          "value": 2,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_FACE_DOWN",
          "value": 3,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_FACE_LEFT",
          "value": 4,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_FACE_UP",
          "value": 5,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_FACE_RIGHT",
          "value": 6,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_FACE_DOWN",
          "value": 7,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_FACE_LEFT",
          "value": 8,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_TRIGGER_1",
          "value": 9,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_TRIGGER_2",
          "value": 10,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_TRIGGER_1",
          "value": 11,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_TRIGGER_2",
          "value": 12,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_MIDDLE_LEFT",
          "value": 13,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_MIDDLE",
          "value": 14,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_MIDDLE_RIGHT",
          "value": 15,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_LEFT_THUMB",
          "value": 16,
          "description": ""
        },
        {
          "name": "GAMEPAD_BUTTON_RIGHT_THUMB",
          "value": 17,
          "description": ""
        }
      ]
    },
    {
      "name": "GamepadAxis",
      "description": "",
      "values": [
        {
          "name": "GAMEPAD_AXIS_LEFT_X",
          "value": 0,
          "description": ""
        },
        {
          "name": "GAMEPAD_AXIS_LEFT_Y",
          "value": 1,
          "description": ""
        },
        {
          "name": "GAMEPAD_AXIS_RIGHT_X",
          "value": 2,
          "description": ""
        },
        {
          "name": "GAMEPAD_AXIS_RIGHT_Y",
          "value": 3,
          "description": ""
        },
        {
          "name": "GAMEPAD_AXIS_LEFT_TRIGGER",
          "value": 4,
          "description": ""
        },
        {
          "name": "GAMEPAD_AXIS_RIGHT_TRIGGER",
          "value": 5,
          "description": ""
        }
      ]
    },
    {
      "name": "MaterialMapIndex",
      "description": "",
      "values": [
        {
          "name": "MATERIAL_MAP_ALBEDO",
          "value": 0,
          "description": ""
        },
        {
          "name": "MATERIAL_MAP_METALNESS",
          "value": 1,
          "description": ""
        },
        {
          "name": "MATERIAL_MAP_NORMAL",
          "value": 2,
          "description": ""
        },
        {
          "name": "MATERIAL_MAP_ROUGHNESS",
          "value": 3,
          "description": ""
        },
        {
          "name": "MATERIAL_MAP_OCCLUSION",
          "value": 4,
          "description": ""
        },
        {
          "name": "MATERIAL_MAP_EMISSION",
          "value": 5,
          "description": ""
        },
        {
          "name": "MATERIAL_MAP_HEIGHT",
          "value": 6,
          "description": ""
        },
        {
          "name": "MATERIAL_MAP_BRDG",
          "value": 7,
          "description": ""
        },
        {
          "name": "MATERIAL_MAP_CUBEMAP",
          "value": 8,
          "description": ""
        },
        {
          "name": "MATERIAL_MAP_IRRADIANCE",
          "value": 9,
          "description": ""
        },
        {
          "name": "MATERIAL_MAP_PREFILTER",
          "value": 10,
          "description": ""
        }
      ]
    },
    {
      "name": "ShaderLocationIndex",
      "description": "",
      "values": [
        {
          "name": "SHADER_LOC_VERTEX_POSITION",
          "value": 0,
          "description": ""
        },
        {
          "name": "SHADER_LOC_VERTEX_TEXCOORD01",
          "value": 1,
          "description": ""
        },
        {
          "name": "SHADER_LOC_VERTEX_TEXCOORD02",
          "value": 2,
          "description": ""
        },
        {
          "name": "SHADER_LOC_VERTEX_NORMAL",
          "value": 3,
          "description": ""
        },
        {
          "name": "SHADER_LOC_VERTEX_TANGENT",
          "value": 4,
          "description": ""
        },
        {
          "name": "SHADER_LOC_VERTEX_COLOR",
          "value": 5,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MATRIX_MVP",
          "value": 6,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MATRIX_VIEW",
          "value": 7,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MATRIX_PROJECTION",
          "value": 8,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MATRIX_MODEL",
          "value": 9,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MATRIX_NORMAL",
          "value": 10,
          "description": ""
        },
        {
          "name": "SHADER_LOC_VECTOR_VIEW",
          "value": 11,
          "description": ""
        },
        {
          "name": "SHADER_LOC_COLOR_DIFFUSE",
          "value": 12,
          "description": ""
        },
        {
          "name": "SHADER_LOC_COLOR_SPECULAR",
          "value": 13,
          "description": ""
        },
        {
          "name": "SHADER_LOC_COLOR_AMBIENT",
          "value": 14,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MAP_ALBEDO",
          "value": 15,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MAP_METALNESS",
          "value": 16,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MAP_NORMAL",
          "value": 17,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MAP_ROUGHNESS",
          "value": 18,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MAP_OCCLUSION",
          "value": 19,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MAP_EMISSION",
          "value": 20,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MAP_HEIGHT",
          "value": 21,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MAP_CUBEMAP",
          "value": 22,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MAP_IRRADIANCE",
          "value": 23,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MAP_PREFILTER",
          "value": 24,
          "description": ""
        },
        {
          "name": "SHADER_LOC_MAP_BRDF",
          "value": 25,
          "description": ""
        }
      ]
    },
    {
      "name": "ShaderUniformDataType",
      "description": "",
      "values": [
        {
          "name": "SHADER_UNIFORM_FLOAT",
          "value": 0,
          "description": ""
        },
        {
          "name": "SHADER_UNIFORM_VEC2",
          "value": 1,
          "description": ""
        },
        {
          "name": "SHADER_UNIFORM_VEC3",
          "value": 2,
          "description": ""
        },
        {
          "name": "SHADER_UNIFORM_VEC4",
          "value": 3,
          "description": ""
        },
        {
          "name": "SHADER_UNIFORM_INT",
          "value": 4,
          "description": ""
        },
        {
          "name": "SHADER_UNIFORM_IVEC2",
          "value": 5,
          "description": ""
        },
        {
          "name": "SHADER_UNIFORM_IVEC3",
          "value": 6,
          "description": ""
        },
        {
          "name": "SHADER_UNIFORM_IVEC4",
          "value": 7,
          "description": ""
        },
        {
          "name": "SHADER_UNIFORM_SAMPLER2D",
          "value": 8,
          "description": ""
        }
      ]
    },
    {
      "name": "PixelFormat",
      "description": "",
      "values": [
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_GRAYSCALE",
          "value": 1,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA",
          "value": 2,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R5G6B5",
          "value": 3,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R8G8B8",
          "value": 4,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R5G5B5A1",
          "value": 5,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R4G4B4A4",
          "value": 6,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R8G8B8A8",
          "value": 7,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R32",
          "value": 8,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R32G32B32",
          "value": 9,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_UNCOMPRESSED_R32G32B32A32",
          "value": 10,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_DXT1_RGB",
          "value": 11,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_DXT1_RGBA",
          "value": 12,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_DXT3_RGBA",
          "value": 13,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_DXT5_RGBA",
          "value": 14,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_ETC1_RGB",
          "value": 15,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_ETC2_RGB",
          "value": 16,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA",
          "value": 17,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_PVRT_RGB",
          "value": 18,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_PVRT_RGBA",
          "value": 19,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA",
          "value": 20,
          "description": ""
        },
        {
          "name": "PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA",
          "value": 21,
          "description": ""
        }
      ]
    },
    {
      "name": "TextureFilter",
      "description": "",
      "values": [
        {
          "name": "TEXTURE_FILTER_POINT",
          "value": 0,
          "description": ""
        },
        {
          "name": "TEXTURE_FILTER_BILINEAR",
          "value": 1,
          "description": ""
        },
        {
          "name": "TEXTURE_FILTER_TRILINEAR",
          "value": 2,
          "description": ""
        },
        {
          "name": "TEXTURE_FILTER_ANISOTROPIC_4X",
          "value": 3,
          "description": ""
        },
        {
          "name": "TEXTURE_FILTER_ANISOTROPIC_8X",
          "value": 4,
          "description": ""
        },
        {
          "name": "TEXTURE_FILTER_ANISOTROPIC_16X",
          "value": 5,
          "description": ""
        }
      ]
    },
    {
      "name": "TextureWrap",
      "description": "",
      "values": [
        {
          "name": "TEXTURE_WRAP_REPEAT",
          "value": 0,
          "description": ""
        },
        {
          "name": "TEXTURE_WRAP_CLAMP",
          "value": 1,
          "description": ""
        },
        {
          "name": "TEXTURE_WRAP_MIRROR_REPEAT",
          "value": 2,
          "description": ""
        },
        {
          "name": "TEXTURE_WRAP_MIRROR_CLAMP",
          "value": 3,
          "description": ""
        }
      ]
    },
    {
      "name": "CubemapLayout",
      "description": "",
      "values": [
        {
          "name": "CUBEMAP_LAYOUT_AUTO_DETECT",
          "value": 0,
          "description": ""
        },
        {
          "name": "CUBEMAP_LAYOUT_LINE_VERTICAL",
          "value": 1,
          "description": ""
        },
        {
          "name": "CUBEMAP_LAYOUT_LINE_HORIZONTAL",
          "value": 2,
          "description": ""
        },
        {
          "name": "CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR",
          "value": 3,
          "description": ""
        },
        {
          "name": "CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE",
          "value": 4,
          "description": ""
        },
        {
          "name": "CUBEMAP_LAYOUT_PANORAMA",
          "value": 5,
          "description": ""
        }
      ]
    },
    {
      "name": "FontType",
      "description": "",
      "values": [
        {
          "name": "FONT_DEFAULT",
          "value": 0,
          "description": ""
        },
        {
          "name": "FONT_BITMAP",
          "value": 1,
          "description": ""
        },
        {
          "name": "FONT_SDF",
          "value": 2,
          "description": ""
        }
      ]
    },
    {
      "name": "BlendMode",
      "description": "",
      "values": [
        {
          "name": "BLEND_ALPHA",
          "value": 0,
          "description": ""
        },
        {
          "name": "BLEND_ADDITIVE",
          "value": 1,
          "description": ""
        },
        {
          "name": "BLEND_MULTIPLIED",
          "value": 2,
          "description": ""
        },
        {
          "name": "BLEND_ADD_COLORS",
          "value": 3,
          "description": ""
        },
        {
          "name": "BLEND_SUBTRACT_COLORS",
          "value": 4,
          "description": ""
        },
        {
          "name": "BLEND_CUSTOM",
          "value": 5,
          "description": ""
        }
      ]
    },
    {
      "name": "Gestures",
      "description": "",
      "values": [
        {
          "name": "GESTURE_NONE",
          "value": 0,
          "description": ""
        },
        {
          "name": "GESTURE_TAP",
          "value": 1,
          "description": ""
        },
        {
          "name": "GESTURE_DOUBLETAP",
          "value": 2,
          "description": ""
        },
        {
          "name": "GESTURE_HOLD",
          "value": 4,
          "description": ""
        },
        {
          "name": "GESTURE_DRAG",
          "value": 8,
          "description": ""
        },
        {
          "name": "GESTURE_SWIPE_RIGHT",
          "value": 16,
          "description": ""
        },
        {
          "name": "GESTURE_SWIPE_LEFT",
          "value": 32,
          "description": ""
        },
        {
          "name": "GESTURE_SWIPE_UP",
          "value": 64,
          "description": ""
        },
        {
          "name": "GESTURE_SWIPE_DOWN",
          "value": 128,
          "description": ""
        },
        {
          "name": "GESTURE_PINCH_IN",
          "value": 256,
          "description": ""
        },
        {
          "name": "GESTURE_PINCH_OUT",
          "value": 512,
          "description": ""
        }
      ]
    },
    {
      "name": "CameraMode",
      "description": "",
      "values": [
        {
          "name": "CAMERA_CUSTOM",
          "value": 0,
          "description": ""
        },
        {
          "name": "CAMERA_FREE",
          "value": 1,
          "description": ""
        },
        {
          "name": "CAMERA_ORBITAL",
          "value": 2,
          "description": ""
        },
        {
          "name": "CAMERA_FIRST_PERSON",
          "value": 3,
          "description": ""
        },
        {
          "name": "CAMERA_THIRD_PERSON",
          "value": 4,
          "description": ""
        }
      ]
    },
    {
      "name": "CameraProjection",
      "description": "",
      "values": [
        {
          "name": "CAMERA_PERSPECTIVE",
          "value": 0,
          "description": ""
        },
        {
          "name": "CAMERA_ORTHOGRAPHIC",
          "value": 1,
          "description": ""
        }
      ]
    },
    {
      "name": "NPatchLayout",
      "description": "",
      "values": [
        {
          "name": "NPATCH_NINE_PATCH",
          "value": 0,
          "description": ""
        },
        {
          "name": "NPATCH_THREE_PATCH_VERTICAL",
          "value": 1,
          "description": ""
        },
        {
          "name": "NPATCH_THREE_PATCH_HORIZONTAL",
          "value": 2,
          "description": ""
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "InitWindow",
      "description": "Initialize window and OpenGL context",
      "returnType": "void",
      "params": {
        "width": "int",
        "height": "int",
        "title": "const char *"
      }
    },
    {
      "name": "WindowShouldClose",
      "description": "Check if KEY_ESCAPE pressed or Close icon pressed",
      "returnType": "bool"
    },
    {
      "name": "CloseWindow",
      "description": "Close window and unload OpenGL context",
      "returnType": "void"
    },
    {
      "name": "IsWindowReady",
      "description": "Check if window has been initialized successfully",
      "returnType": "bool"
    },
    {
      "name": "IsWindowFullscreen",
      "description": "Check if window is currently fullscreen",
      "returnType": "bool"
    },
    {
      "name": "IsWindowHidden",
      "description": "Check if window is currently hidden (only PLATFORM_DESKTOP)",
      "returnType": "bool"
    },
    {
      "name": "IsWindowMinimized",
      "description": "Check if window is currently minimized (only PLATFORM_DESKTOP)",
      "returnType": "bool"
    },
    {
      "name": "IsWindowMaximized",
      "description": "Check if window is currently maximized (only PLATFORM_DESKTOP)",
      "returnType": "bool"
    },
    {
      "name": "IsWindowFocused",
      "description": "Check if window is currently focused (only PLATFORM_DESKTOP)",
      "returnType": "bool"
    },
    {
      "name": "IsWindowResized",
      "description": "Check if window has been resized last frame",
      "returnType": "bool"
    },
    {
      "name": "IsWindowState",
      "description": "Check if one specific window flag is enabled",
      "returnType": "bool",
      "params": {
        "flag": "unsigned int"
      }
    },
    {
      "name": "SetWindowState",
      "description": "Set window configuration state using flags",
      "returnType": "void",
      "params": {
        "flags": "unsigned int"
      }
    },
    {
      "name": "ClearWindowState",
      "description": "Clear window configuration state flags",
      "returnType": "void",
      "params": {
        "flags": "unsigned int"
      }
    },
    {
      "name": "ToggleFullscreen",
      "description": "Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)",
      "returnType": "void"
    },
    {
      "name": "MaximizeWindow",
      "description": "Set window state: maximized, if resizable (only PLATFORM_DESKTOP)",
      "returnType": "void"
    },
    {
      "name": "MinimizeWindow",
      "description": "Set window state: minimized, if resizable (only PLATFORM_DESKTOP)",
      "returnType": "void"
    },
    {
      "name": "RestoreWindow",
      "description": "Set window state: not minimized/maximized (only PLATFORM_DESKTOP)",
      "returnType": "void"
    },
    {
      "name": "SetWindowIcon",
      "description": "Set icon for window (only PLATFORM_DESKTOP)",
      "returnType": "void",
      "params": {
        "image": "Image"
      }
    },
    {
      "name": "SetWindowTitle",
      "description": "Set title for window (only PLATFORM_DESKTOP)",
      "returnType": "void",
      "params": {
        "title": "const char *"
      }
    },
    {
      "name": "SetWindowPosition",
      "description": "Set window position on screen (only PLATFORM_DESKTOP)",
      "returnType": "void",
      "params": {
        "x": "int",
        "y": "int"
      }
    },
    {
      "name": "SetWindowMonitor",
      "description": "Set monitor for the current window (fullscreen mode)",
      "returnType": "void",
      "params": {
        "monitor": "int"
      }
    },
    {
      "name": "SetWindowMinSize",
      "description": "Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)",
      "returnType": "void",
      "params": {
        "width": "int",
        "height": "int"
      }
    },
    {
      "name": "SetWindowSize",
      "description": "Set window dimensions",
      "returnType": "void",
      "params": {
        "width": "int",
        "height": "int"
      }
    },
    {
      "name": "GetWindowHandle",
      "description": "Get native window handle",
      "returnType": "void *"
    },
    {
      "name": "GetScreenWidth",
      "description": "Get current screen width",
      "returnType": "int"
    },
    {
      "name": "GetScreenHeight",
      "description": "Get current screen height",
      "returnType": "int"
    },
    {
      "name": "GetMonitorCount",
      "description": "Get number of connected monitors",
      "returnType": "int"
    },
    {
      "name": "GetCurrentMonitor",
      "description": "Get current connected monitor",
      "returnType": "int"
    },
    {
      "name": "GetMonitorPosition",
      "description": "Get specified monitor position",
      "returnType": "Vector2",
      "params": {
        "monitor": "int"
      }
    },
    {
      "name": "GetMonitorWidth",
      "description": "Get specified monitor width (max available by monitor)",
      "returnType": "int",
      "params": {
        "monitor": "int"
      }
    },
    {
      "name": "GetMonitorHeight",
      "description": "Get specified monitor height (max available by monitor)",
      "returnType": "int",
      "params": {
        "monitor": "int"
      }
    },
    {
      "name": "GetMonitorPhysicalWidth",
      "description": "Get specified monitor physical width in millimetres",
      "returnType": "int",
      "params": {
        "monitor": "int"
      }
    },
    {
      "name": "GetMonitorPhysicalHeight",
      "description": "Get specified monitor physical height in millimetres",
      "returnType": "int",
      "params": {
        "monitor": "int"
      }
    },
    {
      "name": "GetMonitorRefreshRate",
      "description": "Get specified monitor refresh rate",
      "returnType": "int",
      "params": {
        "monitor": "int"
      }
    },
    {
      "name": "GetWindowPosition",
      "description": "Get window position XY on monitor",
      "returnType": "Vector2"
    },
    {
      "name": "GetWindowScaleDPI",
      "description": "Get window scale DPI factor",
      "returnType": "Vector2"
    },
    {
      "name": "GetMonitorName",
      "description": "Get the human-readable, UTF-8 encoded name of the primary monitor",
      "returnType": "const char *",
      "params": {
        "monitor": "int"
      }
    },
    {
      "name": "SetClipboardText",
      "description": "Set clipboard text content",
      "returnType": "void",
      "params": {
        "text": "const char *"
      }
    },
    {
      "name": "GetClipboardText",
      "description": "Get clipboard text content",
      "returnType": "const char *"
    },
    {
      "name": "ShowCursor",
      "description": "Shows cursor",
      "returnType": "void"
    },
    {
      "name": "HideCursor",
      "description": "Hides cursor",
      "returnType": "void"
    },
    {
      "name": "IsCursorHidden",
      "description": "Check if cursor is not visible",
      "returnType": "bool"
    },
    {
      "name": "EnableCursor",
      "description": "Enables cursor (unlock cursor)",
      "returnType": "void"
    },
    {
      "name": "DisableCursor",
      "description": "Disables cursor (lock cursor)",
      "returnType": "void"
    },
    {
      "name": "IsCursorOnScreen",
      "description": "Check if cursor is on the current screen.",
      "returnType": "bool"
    },
    {
      "name": "ClearBackground",
      "description": "Set background color (framebuffer clear color)",
      "returnType": "void",
      "params": {
        "color": "Color"
      }
    },
    {
      "name": "BeginDrawing",
      "description": "Setup canvas (framebuffer) to start drawing",
      "returnType": "void"
    },
    {
      "name": "EndDrawing",
      "description": "End canvas drawing and swap buffers (double buffering)",
      "returnType": "void"
    },
    {
      "name": "BeginMode2D",
      "description": "Initialize 2D mode with custom camera (2D)",
      "returnType": "void",
      "params": {
        "camera": "Camera2D"
      }
    },
    {
      "name": "EndMode2D",
      "description": "Ends 2D mode with custom camera",
      "returnType": "void"
    },
    {
      "name": "BeginMode3D",
      "description": "Initializes 3D mode with custom camera (3D)",
      "returnType": "void",
      "params": {
        "camera": "Camera3D"
      }
    },
    {
      "name": "EndMode3D",
      "description": "Ends 3D mode and returns to default 2D orthographic mode",
      "returnType": "void"
    },
    {
      "name": "BeginTextureMode",
      "description": "Initializes render texture for drawing",
      "returnType": "void",
      "params": {
        "target": "RenderTexture2D"
      }
    },
    {
      "name": "EndTextureMode",
      "description": "Ends drawing to render texture",
      "returnType": "void"
    },
    {
      "name": "BeginShaderMode",
      "description": "Begin custom shader drawing",
      "returnType": "void",
      "params": {
        "shader": "Shader"
      }
    },
    {
      "name": "EndShaderMode",
      "description": "End custom shader drawing (use default shader)",
      "returnType": "void"
    },
    {
      "name": "BeginBlendMode",
      "description": "Begin blending mode (alpha, additive, multiplied)",
      "returnType": "void",
      "params": {
        "mode": "int"
      }
    },
    {
      "name": "EndBlendMode",
      "description": "End blending mode (reset to default: alpha blending)",
      "returnType": "void"
    },
    {
      "name": "BeginScissorMode",
      "description": "Begin scissor mode (define screen area for following drawing)",
      "returnType": "void",
      "params": {
        "x": "int",
        "y": "int",
        "width": "int",
        "height": "int"
      }
    },
    {
      "name": "EndScissorMode",
      "description": "End scissor mode",
      "returnType": "void"
    },
    {
      "name": "BeginVrStereoMode",
      "description": "Begin stereo rendering (requires VR simulator)",
      "returnType": "void",
      "params": {
        "config": "VrStereoConfig"
      }
    },
    {
      "name": "EndVrStereoMode",
      "description": "End stereo rendering (requires VR simulator)",
      "returnType": "void"
    },
    {
      "name": "LoadVrStereoConfig",
      "description": "Load VR stereo config for VR simulator device parameters",
      "returnType": "VrStereoConfig",
      "params": {
        "device": "VrDeviceInfo"
      }
    },
    {
      "name": "UnloadVrStereoConfig",
      "description": "Unload VR stereo config",
      "returnType": "void",
      "params": {
        "config": "VrStereoConfig"
      }
    },
    {
      "name": "LoadShader",
      "description": "Load shader from files and bind default locations",
      "returnType": "Shader",
      "params": {
        "vsFileName": "const char *",
        "fsFileName": "const char *"
      }
    },
    {
      "name": "LoadShaderFromMemory",
      "description": "Load shader from code strings and bind default locations",
      "returnType": "Shader",
      "params": {
        "vsCode": "const char *",
        "fsCode": "const char *"
      }
    },
    {
      "name": "GetShaderLocation",
      "description": "Get shader uniform location",
      "returnType": "int",
      "params": {
        "shader": "Shader",
        "uniformName": "const char *"
      }
    },
    {
      "name": "GetShaderLocationAttrib",
      "description": "Get shader attribute location",
      "returnType": "int",
      "params": {
        "shader": "Shader",
        "attribName": "const char *"
      }
    },
    {
      "name": "SetShaderValue",
      "description": "Set shader uniform value",
      "returnType": "void",
      "params": {
        "shader": "Shader",
        "locIndex": "int",
        "value": "const void *",
        "uniformType": "int"
      }
    },
    {
      "name": "SetShaderValueV",
      "description": "Set shader uniform value vector",
      "returnType": "void",
      "params": {
        "shader": "Shader",
        "locIndex": "int",
        "value": "const void *",
        "uniformType": "int",
        "count": "int"
      }
    },
    {
      "name": "SetShaderValueMatrix",
      "description": "Set shader uniform value (matrix 4x4)",
      "returnType": "void",
      "params": {
        "shader": "Shader",
        "locIndex": "int",
        "mat": "Matrix"
      }
    },
    {
      "name": "SetShaderValueTexture",
      "description": "Set shader uniform value for texture (sampler2d)",
      "returnType": "void",
      "params": {
        "shader": "Shader",
        "locIndex": "int",
        "texture": "Texture2D"
      }
    },
    {
      "name": "UnloadShader",
      "description": "Unload shader from GPU memory (VRAM)",
      "returnType": "void",
      "params": {
        "shader": "Shader"
      }
    },
    {
      "name": "GetMouseRay",
      "description": "Returns a ray trace from mouse position",
      "returnType": "Ray",
      "params": {
        "mousePosition": "Vector2",
        "camera": "Camera"
      }
    },
    {
      "name": "GetCameraMatrix",
      "description": "Returns camera transform matrix (view matrix)",
      "returnType": "Matrix",
      "params": {
        "camera": "Camera"
      }
    },
    {
      "name": "GetCameraMatrix2D",
      "description": "Returns camera 2d transform matrix",
      "returnType": "Matrix",
      "params": {
        "camera": "Camera2D"
      }
    },
    {
      "name": "GetWorldToScreen",
      "description": "Returns the screen space position for a 3d world space position",
      "returnType": "Vector2",
      "params": {
        "position": "Vector3",
        "camera": "Camera"
      }
    },
    {
      "name": "GetWorldToScreenEx",
      "description": "Returns size position for a 3d world space position",
      "returnType": "Vector2",
      "params": {
        "position": "Vector3",
        "camera": "Camera",
        "width": "int",
        "height": "int"
      }
    },
    {
      "name": "GetWorldToScreen2D",
      "description": "Returns the screen space position for a 2d camera world space position",
      "returnType": "Vector2",
      "params": {
        "position": "Vector2",
        "camera": "Camera2D"
      }
    },
    {
      "name": "GetScreenToWorld2D",
      "description": "Returns the world space position for a 2d camera screen space position",
      "returnType": "Vector2",
      "params": {
        "position": "Vector2",
        "camera": "Camera2D"
      }
    },
    {
      "name": "SetTargetFPS",
      "description": "Set target FPS (maximum)",
      "returnType": "void",
      "params": {
        "fps": "int"
      }
    },
    {
      "name": "GetFPS",
      "description": "Returns current FPS",
      "returnType": "int"
    },
    {
      "name": "GetFrameTime",
      "description": "Returns time in seconds for last frame drawn (delta time)",
      "returnType": "float"
    },
    {
      "name": "GetTime",
      "description": "Returns elapsed time in seconds since InitWindow()",
      "returnType": "double"
    },
    {
      "name": "GetRandomValue",
      "description": "Returns a random value between min and max (both included)",
      "returnType": "int",
      "params": {
        "min": "int",
        "max": "int"
      }
    },
    {
      "name": "TakeScreenshot",
      "description": "Takes a screenshot of current screen (filename extension defines format)",
      "returnType": "void",
      "params": {
        "fileName": "const char *"
      }
    },
    {
      "name": "SetConfigFlags",
      "description": "Setup init configuration flags (view FLAGS)",
      "returnType": "void",
      "params": {
        "flags": "unsigned int"
      }
    },
    {
      "name": "TraceLog",
      "description": "Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR)",
      "returnType": "void",
      "params": {
        "logLevel": "int",
        "text": "const char *",
        "": ""
      }
    },
    {
      "name": "SetTraceLogLevel",
      "description": "Set the current threshold (minimum) log level",
      "returnType": "void",
      "params": {
        "logLevel": "int"
      }
    },
    {
      "name": "MemAlloc",
      "description": "Internal memory allocator",
      "returnType": "void *",
      "params": {
        "size": "int"
      }
    },
    {
      "name": "MemRealloc",
      "description": "Internal memory reallocator",
      "returnType": "void *",
      "params": {
        "ptr": "void *",
        "size": "int"
      }
    },
    {
      "name": "MemFree",
      "description": "Internal memory free",
      "returnType": "void",
      "params": {
        "ptr": "void *"
      }
    },
    {
      "name": "SetTraceLogCallback",
      "description": "Set custom trace log",
      "returnType": "void",
      "params": {
        "callback": "TraceLogCallback"
      }
    },
    {
      "name": "SetLoadFileDataCallback",
      "description": "Set custom file binary data loader",
      "returnType": "void",
      "params": {
        "callback": "LoadFileDataCallback"
      }
    },
    {
      "name": "SetSaveFileDataCallback",
      "description": "Set custom file binary data saver",
      "returnType": "void",
      "params": {
        "callback": "SaveFileDataCallback"
      }
    },
    {
      "name": "SetLoadFileTextCallback",
      "description": "Set custom file text data loader",
      "returnType": "void",
      "params": {
        "callback": "LoadFileTextCallback"
      }
    },
    {
      "name": "SetSaveFileTextCallback",
      "description": "Set custom file text data saver",
      "returnType": "void",
      "params": {
        "callback": "SaveFileTextCallback"
      }
    },
    {
      "name": "LoadFileData",
      "description": "Load file data as byte array (read)",
      "returnType": "unsigned char *",
      "params": {
        "fileName": "const char *",
        "bytesRead": "unsigned int *"
      }
    },
    {
      "name": "UnloadFileData",
      "description": "Unload file data allocated by LoadFileData()",
      "returnType": "void",
      "params": {
        "data": "unsigned char *"
      }
    },
    {
      "name": "SaveFileData",
      "description": "Save data to file from byte array (write), returns true on success",
      "returnType": "bool",
      "params": {
        "fileName": "const char *",
        "data": "void *",
        "bytesToWrite": "unsigned int"
      }
    },
    {
      "name": "LoadFileText",
      "description": "Load text data from file (read), returns a ' 0' terminated string",
      "returnType": "char *",
      "params": {
        "fileName": "const char *"
      }
    },
    {
      "name": "UnloadFileText",
      "description": "Unload file text data allocated by LoadFileText()",
      "returnType": "void",
      "params": {
        "text": "unsigned char *"
      }
    },
    {
      "name": "SaveFileText",
      "description": "Save text data to file (write), string must be ' 0' terminated, returns true on success",
      "returnType": "bool",
      "params": {
        "fileName": "const char *",
        "text": "char *"
      }
    },
    {
      "name": "FileExists",
      "description": "Check if file exists",
      "returnType": "bool",
      "params": {
        "fileName": "const char *"
      }
    },
    {
      "name": "DirectoryExists",
      "description": "Check if a directory path exists",
      "returnType": "bool",
      "params": {
        "dirPath": "const char *"
      }
    },
    {
      "name": "IsFileExtension",
      "description": "Check file extension (including point: .png, .wav)",
      "returnType": "bool",
      "params": {
        "fileName": "const char *",
        "ext": "const char *"
      }
    },
    {
      "name": "GetFileExtension",
      "description": "Get pointer to extension for a filename string (includes dot: \".png\")",
      "returnType": "const char *",
      "params": {
        "fileName": "const char *"
      }
    },
    {
      "name": "GetFileName",
      "description": "Get pointer to filename for a path string",
      "returnType": "const char *",
      "params": {
        "filePath": "const char *"
      }
    },
    {
      "name": "GetFileNameWithoutExt",
      "description": "Get filename string without extension (uses static string)",
      "returnType": "const char *",
      "params": {
        "filePath": "const char *"
      }
    },
    {
      "name": "GetDirectoryPath",
      "description": "Get full path for a given fileName with path (uses static string)",
      "returnType": "const char *",
      "params": {
        "filePath": "const char *"
      }
    },
    {
      "name": "GetPrevDirectoryPath",
      "description": "Get previous directory path for a given path (uses static string)",
      "returnType": "const char *",
      "params": {
        "dirPath": "const char *"
      }
    },
    {
      "name": "GetWorkingDirectory",
      "description": "Get current working directory (uses static string)",
      "returnType": "const char *"
    },
    {
      "name": "GetDirectoryFiles",
      "description": "Get filenames in a directory path (memory should be freed)",
      "returnType": "char **",
      "params": {
        "dirPath": "const char *",
        "count": "int *"
      }
    },
    {
      "name": "ClearDirectoryFiles",
      "description": "Clear directory files paths buffers (free memory)",
      "returnType": "void"
    },
    {
      "name": "ChangeDirectory",
      "description": "Change working directory, return true on success",
      "returnType": "bool",
      "params": {
        "dir": "const char *"
      }
    },
    {
      "name": "IsFileDropped",
      "description": "Check if a file has been dropped into window",
      "returnType": "bool"
    },
    {
      "name": "GetDroppedFiles",
      "description": "Get dropped files names (memory should be freed)",
      "returnType": "char **",
      "params": {
        "count": "int *"
      }
    },
    {
      "name": "ClearDroppedFiles",
      "description": "Clear dropped files paths buffer (free memory)",
      "returnType": "void"
    },
    {
      "name": "GetFileModTime",
      "description": "Get file modification time (last write time)",
      "returnType": "long",
      "params": {
        "fileName": "const char *"
      }
    },
    {
      "name": "CompressData",
      "description": "Compress data (DEFLATE algorithm)",
      "returnType": "unsigned char *",
      "params": {
        "data": "unsigned char *",
        "dataLength": "int",
        "compDataLength": "int *"
      }
    },
    {
      "name": "DecompressData",
      "description": "Decompress data (DEFLATE algorithm)",
      "returnType": "unsigned char *",
      "params": {
        "compData": "unsigned char *",
        "compDataLength": "int",
        "dataLength": "int *"
      }
    },
    {
      "name": "SaveStorageValue",
      "description": "Save integer value to storage file (to defined position), returns true on success",
      "returnType": "bool",
      "params": {
        "position": "unsigned int",
        "value": "int"
      }
    },
    {
      "name": "LoadStorageValue",
      "description": "Load integer value from storage file (from defined position)",
      "returnType": "int",
      "params": {
        "position": "unsigned int"
      }
    },
    {
      "name": "OpenURL",
      "description": "Open URL with default system browser (if available)",
      "returnType": "void",
      "params": {
        "url": "const char *"
      }
    },
    {
      "name": "IsKeyPressed",
      "description": "Detect if a key has been pressed once",
      "returnType": "bool",
      "params": {
        "key": "int"
      }
    },
    {
      "name": "IsKeyDown",
      "description": "Detect if a key is being pressed",
      "returnType": "bool",
      "params": {
        "key": "int"
      }
    },
    {
      "name": "IsKeyReleased",
      "description": "Detect if a key has been released once",
      "returnType": "bool",
      "params": {
        "key": "int"
      }
    },
    {
      "name": "IsKeyUp",
      "description": "Detect if a key is NOT being pressed",
      "returnType": "bool",
      "params": {
        "key": "int"
      }
    },
    {
      "name": "SetExitKey",
      "description": "Set a custom key to exit program (default is ESC)",
      "returnType": "void",
      "params": {
        "key": "int"
      }
    },
    {
      "name": "GetKeyPressed",
      "description": "Get key pressed (keycode), call it multiple times for keys queued",
      "returnType": "int"
    },
    {
      "name": "GetCharPressed",
      "description": "Get char pressed (unicode), call it multiple times for chars queued",
      "returnType": "int"
    },
    {
      "name": "IsGamepadAvailable",
      "description": "Detect if a gamepad is available",
      "returnType": "bool",
      "params": {
        "gamepad": "int"
      }
    },
    {
      "name": "IsGamepadName",
      "description": "Check gamepad name (if available)",
      "returnType": "bool",
      "params": {
        "gamepad": "int",
        "name": "const char *"
      }
    },
    {
      "name": "GetGamepadName",
      "description": "Return gamepad internal name id",
      "returnType": "const char *",
      "params": {
        "gamepad": "int"
      }
    },
    {
      "name": "IsGamepadButtonPressed",
      "description": "Detect if a gamepad button has been pressed once",
      "returnType": "bool",
      "params": {
        "gamepad": "int",
        "button": "int"
      }
    },
    {
      "name": "IsGamepadButtonDown",
      "description": "Detect if a gamepad button is being pressed",
      "returnType": "bool",
      "params": {
        "gamepad": "int",
        "button": "int"
      }
    },
    {
      "name": "IsGamepadButtonReleased",
      "description": "Detect if a gamepad button has been released once",
      "returnType": "bool",
      "params": {
        "gamepad": "int",
        "button": "int"
      }
    },
    {
      "name": "IsGamepadButtonUp",
      "description": "Detect if a gamepad button is NOT being pressed",
      "returnType": "bool",
      "params": {
        "gamepad": "int",
        "button": "int"
      }
    },
    {
      "name": "GetGamepadButtonPressed",
      "description": "Get the last gamepad button pressed",
      "returnType": "int"
    },
    {
      "name": "GetGamepadAxisCount",
      "description": "Return gamepad axis count for a gamepad",
      "returnType": "int",
      "params": {
        "gamepad": "int"
      }
    },
    {
      "name": "GetGamepadAxisMovement",
      "description": "Return axis movement value for a gamepad axis",
      "returnType": "float",
      "params": {
        "gamepad": "int",
        "axis": "int"
      }
    },
    {
      "name": "SetGamepadMappings",
      "description": "Set internal gamepad mappings (SDL_GameControllerDB)",
      "returnType": "int",
      "params": {
        "mappings": "const char *"
      }
    },
    {
      "name": "IsMouseButtonPressed",
      "description": "Detect if a mouse button has been pressed once",
      "returnType": "bool",
      "params": {
        "button": "int"
      }
    },
    {
      "name": "IsMouseButtonDown",
      "description": "Detect if a mouse button is being pressed",
      "returnType": "bool",
      "params": {
        "button": "int"
      }
    },
    {
      "name": "IsMouseButtonReleased",
      "description": "Detect if a mouse button has been released once",
      "returnType": "bool",
      "params": {
        "button": "int"
      }
    },
    {
      "name": "IsMouseButtonUp",
      "description": "Detect if a mouse button is NOT being pressed",
      "returnType": "bool",
      "params": {
        "button": "int"
      }
    },
    {
      "name": "GetMouseX",
      "description": "Returns mouse position X",
      "returnType": "int"
    },
    {
      "name": "GetMouseY",
      "description": "Returns mouse position Y",
      "returnType": "int"
    },
    {
      "name": "GetMousePosition",
      "description": "Returns mouse position XY",
      "returnType": "Vector2"
    },
    {
      "name": "SetMousePosition",
      "description": "Set mouse position XY",
      "returnType": "void",
      "params": {
        "x": "int",
        "y": "int"
      }
    },
    {
      "name": "SetMouseOffset",
      "description": "Set mouse offset",
      "returnType": "void",
      "params": {
        "offsetX": "int",
        "offsetY": "int"
      }
    },
    {
      "name": "SetMouseScale",
      "description": "Set mouse scaling",
      "returnType": "void",
      "params": {
        "scaleX": "float",
        "scaleY": "float"
      }
    },
    {
      "name": "GetMouseWheelMove",
      "description": "Returns mouse wheel movement Y",
      "returnType": "float"
    },
    {
      "name": "SetMouseCursor",
      "description": "Set mouse cursor",
      "returnType": "void",
      "params": {
        "cursor": "int"
      }
    },
    {
      "name": "GetTouchX",
      "description": "Returns touch position X for touch point 0 (relative to screen size)",
      "returnType": "int"
    },
    {
      "name": "GetTouchY",
      "description": "Returns touch position Y for touch point 0 (relative to screen size)",
      "returnType": "int"
    },
    {
      "name": "GetTouchPosition",
      "description": "Returns touch position XY for a touch point index (relative to screen size)",
      "returnType": "Vector2",
      "params": {
        "index": "int"
      }
    },
    {
      "name": "SetGesturesEnabled",
      "description": "Enable a set of gestures using flags",
      "returnType": "void",
      "params": {
        "flags": "unsigned int"
      }
    },
    {
      "name": "IsGestureDetected",
      "description": "Check if a gesture have been detected",
      "returnType": "bool",
      "params": {
        "gesture": "int"
      }
    },
    {
      "name": "GetGestureDetected",
      "description": "Get latest detected gesture",
      "returnType": "int"
    },
    {
      "name": "GetTouchPointsCount",
      "description": "Get touch points count",
      "returnType": "int"
    },
    {
      "name": "GetGestureHoldDuration",
      "description": "Get gesture hold time in milliseconds",
      "returnType": "float"
    },
    {
      "name": "GetGestureDragVector",
      "description": "Get gesture drag vector",
      "returnType": "Vector2"
    },
    {
      "name": "GetGestureDragAngle",
      "description": "Get gesture drag angle",
      "returnType": "float"
    },
    {
      "name": "GetGesturePinchVector",
      "description": "Get gesture pinch delta",
      "returnType": "Vector2"
    },
    {
      "name": "GetGesturePinchAngle",
      "description": "Get gesture pinch angle",
      "returnType": "float"
    },
    {
      "name": "SetCameraMode",
      "description": "Set camera mode (multiple camera modes available)",
      "returnType": "void",
      "params": {
        "camera": "Camera",
        "mode": "int"
      }
    },
    {
      "name": "UpdateCamera",
      "description": "Update camera position for selected mode",
      "returnType": "void",
      "params": {
        "camera": "Camera *"
      }
    },
    {
      "name": "SetCameraPanControl",
      "description": "Set camera pan key to combine with mouse movement (free camera)",
      "returnType": "void",
      "params": {
        "keyPan": "int"
      }
    },
    {
      "name": "SetCameraAltControl",
      "description": "Set camera alt key to combine with mouse movement (free camera)",
      "returnType": "void",
      "params": {
        "keyAlt": "int"
      }
    },
    {
      "name": "SetCameraSmoothZoomControl",
      "description": "Set camera smooth zoom key to combine with mouse (free camera)",
      "returnType": "void",
      "params": {
        "keySmoothZoom": "int"
      }
    },
    {
      "name": "SetCameraMoveControls",
      "description": "Set camera move controls (1st person and 3rd person cameras)",
      "returnType": "void",
      "params": {
        "keyFront": "int",
        "keyBack": "int",
        "keyRight": "int",
        "keyLeft": "int",
        "keyUp": "int",
        "keyDown": "int"
      }
    },
    {
      "name": "SetShapesTexture",
      "description": "",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "source": "Rectangle"
      }
    },
    {
      "name": "DrawPixel",
      "description": "Draw a pixel",
      "returnType": "void",
      "params": {
        "posX": "int",
        "posY": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawPixelV",
      "description": "Draw a pixel (Vector version)",
      "returnType": "void",
      "params": {
        "position": "Vector2",
        "color": "Color"
      }
    },
    {
      "name": "DrawLine",
      "description": "Draw a line",
      "returnType": "void",
      "params": {
        "startPosX": "int",
        "startPosY": "int",
        "endPosX": "int",
        "endPosY": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawLineV",
      "description": "Draw a line (Vector version)",
      "returnType": "void",
      "params": {
        "startPos": "Vector2",
        "endPos": "Vector2",
        "color": "Color"
      }
    },
    {
      "name": "DrawLineEx",
      "description": "Draw a line defining thickness",
      "returnType": "void",
      "params": {
        "startPos": "Vector2",
        "endPos": "Vector2",
        "thick": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawLineBezier",
      "description": "Draw a line using cubic-bezier curves in-out",
      "returnType": "void",
      "params": {
        "startPos": "Vector2",
        "endPos": "Vector2",
        "thick": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawLineBezierQuad",
      "description": "raw line using quadratic bezier curves with a control point",
      "returnType": "void",
      "params": {
        "startPos": "Vector2",
        "endPos": "Vector2",
        "controlPos": "Vector2",
        "thick": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawLineStrip",
      "description": "Draw lines sequence",
      "returnType": "void",
      "params": {
        "points": "Vector2 *",
        "pointsCount": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawCircle",
      "description": "Draw a color-filled circle",
      "returnType": "void",
      "params": {
        "centerX": "int",
        "centerY": "int",
        "radius": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawCircleSector",
      "description": "Draw a piece of a circle",
      "returnType": "void",
      "params": {
        "center": "Vector2",
        "radius": "float",
        "startAngle": "float",
        "endAngle": "float",
        "segments": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawCircleSectorLines",
      "description": "Draw circle sector outline",
      "returnType": "void",
      "params": {
        "center": "Vector2",
        "radius": "float",
        "startAngle": "float",
        "endAngle": "float",
        "segments": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawCircleGradient",
      "description": "Draw a gradient-filled circle",
      "returnType": "void",
      "params": {
        "centerX": "int",
        "centerY": "int",
        "radius": "float",
        "color1": "Color",
        "color2": "Color"
      }
    },
    {
      "name": "DrawCircleV",
      "description": "Draw a color-filled circle (Vector version)",
      "returnType": "void",
      "params": {
        "center": "Vector2",
        "radius": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawCircleLines",
      "description": "Draw circle outline",
      "returnType": "void",
      "params": {
        "centerX": "int",
        "centerY": "int",
        "radius": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawEllipse",
      "description": "Draw ellipse",
      "returnType": "void",
      "params": {
        "centerX": "int",
        "centerY": "int",
        "radiusH": "float",
        "radiusV": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawEllipseLines",
      "description": "Draw ellipse outline",
      "returnType": "void",
      "params": {
        "centerX": "int",
        "centerY": "int",
        "radiusH": "float",
        "radiusV": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawRing",
      "description": "Draw ring",
      "returnType": "void",
      "params": {
        "center": "Vector2",
        "innerRadius": "float",
        "outerRadius": "float",
        "startAngle": "float",
        "endAngle": "float",
        "segments": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawRingLines",
      "description": "Draw ring outline",
      "returnType": "void",
      "params": {
        "center": "Vector2",
        "innerRadius": "float",
        "outerRadius": "float",
        "startAngle": "float",
        "endAngle": "float",
        "segments": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawRectangle",
      "description": "Draw a color-filled rectangle",
      "returnType": "void",
      "params": {
        "posX": "int",
        "posY": "int",
        "width": "int",
        "height": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawRectangleV",
      "description": "Draw a color-filled rectangle (Vector version)",
      "returnType": "void",
      "params": {
        "position": "Vector2",
        "size": "Vector2",
        "color": "Color"
      }
    },
    {
      "name": "DrawRectangleRec",
      "description": "Draw a color-filled rectangle",
      "returnType": "void",
      "params": {
        "rec": "Rectangle",
        "color": "Color"
      }
    },
    {
      "name": "DrawRectanglePro",
      "description": "Draw a color-filled rectangle with pro parameters",
      "returnType": "void",
      "params": {
        "rec": "Rectangle",
        "origin": "Vector2",
        "rotation": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawRectangleGradientV",
      "description": "Draw a vertical-gradient-filled rectangle",
      "returnType": "void",
      "params": {
        "posX": "int",
        "posY": "int",
        "width": "int",
        "height": "int",
        "color1": "Color",
        "color2": "Color"
      }
    },
    {
      "name": "DrawRectangleGradientH",
      "description": "Draw a horizontal-gradient-filled rectangle",
      "returnType": "void",
      "params": {
        "posX": "int",
        "posY": "int",
        "width": "int",
        "height": "int",
        "color1": "Color",
        "color2": "Color"
      }
    },
    {
      "name": "DrawRectangleGradientEx",
      "description": "Draw a gradient-filled rectangle with custom vertex colors",
      "returnType": "void",
      "params": {
        "rec": "Rectangle",
        "col1": "Color",
        "col2": "Color",
        "col3": "Color",
        "col4": "Color"
      }
    },
    {
      "name": "DrawRectangleLines",
      "description": "Draw rectangle outline",
      "returnType": "void",
      "params": {
        "posX": "int",
        "posY": "int",
        "width": "int",
        "height": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawRectangleLinesEx",
      "description": "Draw rectangle outline with extended parameters",
      "returnType": "void",
      "params": {
        "rec": "Rectangle",
        "lineThick": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawRectangleRounded",
      "description": "Draw rectangle with rounded edges",
      "returnType": "void",
      "params": {
        "rec": "Rectangle",
        "roundness": "float",
        "segments": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawRectangleRoundedLines",
      "description": "Draw rectangle with rounded edges outline",
      "returnType": "void",
      "params": {
        "rec": "Rectangle",
        "roundness": "float",
        "segments": "int",
        "lineThick": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawTriangle",
      "description": "Draw a color-filled triangle (vertex in counter-clockwise order!)",
      "returnType": "void",
      "params": {
        "v1": "Vector2",
        "v2": "Vector2",
        "v3": "Vector2",
        "color": "Color"
      }
    },
    {
      "name": "DrawTriangleLines",
      "description": "Draw triangle outline (vertex in counter-clockwise order!)",
      "returnType": "void",
      "params": {
        "v1": "Vector2",
        "v2": "Vector2",
        "v3": "Vector2",
        "color": "Color"
      }
    },
    {
      "name": "DrawTriangleFan",
      "description": "Draw a triangle fan defined by points (first vertex is the center)",
      "returnType": "void",
      "params": {
        "points": "Vector2 *",
        "pointsCount": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawTriangleStrip",
      "description": "Draw a triangle strip defined by points",
      "returnType": "void",
      "params": {
        "points": "Vector2 *",
        "pointsCount": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawPoly",
      "description": "Draw a regular polygon (Vector version)",
      "returnType": "void",
      "params": {
        "center": "Vector2",
        "sides": "int",
        "radius": "float",
        "rotation": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawPolyLines",
      "description": "Draw a polygon outline of n sides",
      "returnType": "void",
      "params": {
        "center": "Vector2",
        "sides": "int",
        "radius": "float",
        "rotation": "float",
        "color": "Color"
      }
    },
    {
      "name": "CheckCollisionRecs",
      "description": "Check collision between two rectangles",
      "returnType": "bool",
      "params": {
        "rec1": "Rectangle",
        "rec2": "Rectangle"
      }
    },
    {
      "name": "CheckCollisionCircles",
      "description": "Check collision between two circles",
      "returnType": "bool",
      "params": {
        "center1": "Vector2",
        "radius1": "float",
        "center2": "Vector2",
        "radius2": "float"
      }
    },
    {
      "name": "CheckCollisionCircleRec",
      "description": "Check collision between circle and rectangle",
      "returnType": "bool",
      "params": {
        "center": "Vector2",
        "radius": "float",
        "rec": "Rectangle"
      }
    },
    {
      "name": "CheckCollisionPointRec",
      "description": "Check if point is inside rectangle",
      "returnType": "bool",
      "params": {
        "point": "Vector2",
        "rec": "Rectangle"
      }
    },
    {
      "name": "CheckCollisionPointCircle",
      "description": "Check if point is inside circle",
      "returnType": "bool",
      "params": {
        "point": "Vector2",
        "center": "Vector2",
        "radius": "float"
      }
    },
    {
      "name": "CheckCollisionPointTriangle",
      "description": "Check if point is inside a triangle",
      "returnType": "bool",
      "params": {
        "point": "Vector2",
        "p1": "Vector2",
        "p2": "Vector2",
        "p3": "Vector2"
      }
    },
    {
      "name": "CheckCollisionLines",
      "description": "Check the collision between two lines defined by two points each, returns collision point by reference",
      "returnType": "bool",
      "params": {
        "startPos1": "Vector2",
        "endPos1": "Vector2",
        "startPos2": "Vector2",
        "endPos2": "Vector2",
        "collisionPoint": "Vector2 *"
      }
    },
    {
      "name": "GetCollisionRec",
      "description": "Get collision rectangle for two rectangles collision",
      "returnType": "Rectangle",
      "params": {
        "rec1": "Rectangle",
        "rec2": "Rectangle"
      }
    },
    {
      "name": "LoadImage",
      "description": "Load image from file into CPU memory (RAM)",
      "returnType": "Image",
      "params": {
        "fileName": "const char *"
      }
    },
    {
      "name": "LoadImageRaw",
      "description": "Load image from RAW file data",
      "returnType": "Image",
      "params": {
        "fileName": "const char *",
        "width": "int",
        "height": "int",
        "format": "int",
        "headerSize": "int"
      }
    },
    {
      "name": "LoadImageAnim",
      "description": "Load image sequence from file (frames appended to image.data)",
      "returnType": "Image",
      "params": {
        "fileName": "const char *",
        "frames": "int *"
      }
    },
    {
      "name": "LoadImageFromMemory",
      "description": "Load image from memory buffer, fileType refers to extension: i.e. \".png\"",
      "returnType": "Image",
      "params": {
        "fileType": "const char *",
        "fileData": "const unsigned char *",
        "dataSize": "int"
      }
    },
    {
      "name": "UnloadImage",
      "description": "Unload image from CPU memory (RAM)",
      "returnType": "void",
      "params": {
        "image": "Image"
      }
    },
    {
      "name": "ExportImage",
      "description": "Export image data to file, returns true on success",
      "returnType": "bool",
      "params": {
        "image": "Image",
        "fileName": "const char *"
      }
    },
    {
      "name": "ExportImageAsCode",
      "description": "Export image as code file defining an array of bytes, returns true on success",
      "returnType": "bool",
      "params": {
        "image": "Image",
        "fileName": "const char *"
      }
    },
    {
      "name": "GenImageColor",
      "description": "Generate image: plain color",
      "returnType": "Image",
      "params": {
        "width": "int",
        "height": "int",
        "color": "Color"
      }
    },
    {
      "name": "GenImageGradientV",
      "description": "Generate image: vertical gradient",
      "returnType": "Image",
      "params": {
        "width": "int",
        "height": "int",
        "top": "Color",
        "bottom": "Color"
      }
    },
    {
      "name": "GenImageGradientH",
      "description": "Generate image: horizontal gradient",
      "returnType": "Image",
      "params": {
        "width": "int",
        "height": "int",
        "left": "Color",
        "right": "Color"
      }
    },
    {
      "name": "GenImageGradientRadial",
      "description": "Generate image: radial gradient",
      "returnType": "Image",
      "params": {
        "width": "int",
        "height": "int",
        "density": "float",
        "inner": "Color",
        "outer": "Color"
      }
    },
    {
      "name": "GenImageChecked",
      "description": "Generate image: checked",
      "returnType": "Image",
      "params": {
        "width": "int",
        "height": "int",
        "checksX": "int",
        "checksY": "int",
        "col1": "Color",
        "col2": "Color"
      }
    },
    {
      "name": "GenImageWhiteNoise",
      "description": "Generate image: white noise",
      "returnType": "Image",
      "params": {
        "width": "int",
        "height": "int",
        "factor": "float"
      }
    },
    {
      "name": "GenImagePerlinNoise",
      "description": "Generate image: perlin noise",
      "returnType": "Image",
      "params": {
        "width": "int",
        "height": "int",
        "offsetX": "int",
        "offsetY": "int",
        "scale": "float"
      }
    },
    {
      "name": "GenImageCellular",
      "description": "Generate image: cellular algorithm. Bigger tileSize means bigger cells",
      "returnType": "Image",
      "params": {
        "width": "int",
        "height": "int",
        "tileSize": "int"
      }
    },
    {
      "name": "ImageCopy",
      "description": "Create an image duplicate (useful for transformations)",
      "returnType": "Image",
      "params": {
        "image": "Image"
      }
    },
    {
      "name": "ImageFromImage",
      "description": "Create an image from another image piece",
      "returnType": "Image",
      "params": {
        "image": "Image",
        "rec": "Rectangle"
      }
    },
    {
      "name": "ImageText",
      "description": "Create an image from text (default font)",
      "returnType": "Image",
      "params": {
        "text": "const char *",
        "fontSize": "int",
        "color": "Color"
      }
    },
    {
      "name": "ImageTextEx",
      "description": "Create an image from text (custom sprite font)",
      "returnType": "Image",
      "params": {
        "font": "Font",
        "text": "const char *",
        "fontSize": "float",
        "spacing": "float",
        "tint": "Color"
      }
    },
    {
      "name": "ImageFormat",
      "description": "Convert image data to desired format",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "newFormat": "int"
      }
    },
    {
      "name": "ImageToPOT",
      "description": "Convert image to POT (power-of-two)",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "fill": "Color"
      }
    },
    {
      "name": "ImageCrop",
      "description": "Crop an image to a defined rectangle",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "crop": "Rectangle"
      }
    },
    {
      "name": "ImageAlphaCrop",
      "description": "Crop image depending on alpha value",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "threshold": "float"
      }
    },
    {
      "name": "ImageAlphaClear",
      "description": "Clear alpha channel to desired color",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "color": "Color",
        "threshold": "float"
      }
    },
    {
      "name": "ImageAlphaMask",
      "description": "Apply alpha mask to image",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "alphaMask": "Image"
      }
    },
    {
      "name": "ImageAlphaPremultiply",
      "description": "Premultiply alpha channel",
      "returnType": "void",
      "params": {
        "image": "Image *"
      }
    },
    {
      "name": "ImageResize",
      "description": "Resize image (Bicubic scaling algorithm)",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "newWidth": "int",
        "newHeight": "int"
      }
    },
    {
      "name": "ImageResizeNN",
      "description": "Resize image (Nearest-Neighbor scaling algorithm)",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "newWidth": "int",
        "newHeight": "int"
      }
    },
    {
      "name": "ImageResizeCanvas",
      "description": "Resize canvas and fill with color",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "newWidth": "int",
        "newHeight": "int",
        "offsetX": "int",
        "offsetY": "int",
        "fill": "Color"
      }
    },
    {
      "name": "ImageMipmaps",
      "description": "Generate all mipmap levels for a provided image",
      "returnType": "void",
      "params": {
        "image": "Image *"
      }
    },
    {
      "name": "ImageDither",
      "description": "Dither image data to 16bpp or lower (Floyd-Steinberg dithering)",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "rBpp": "int",
        "gBpp": "int",
        "bBpp": "int",
        "aBpp": "int"
      }
    },
    {
      "name": "ImageFlipVertical",
      "description": "Flip image vertically",
      "returnType": "void",
      "params": {
        "image": "Image *"
      }
    },
    {
      "name": "ImageFlipHorizontal",
      "description": "Flip image horizontally",
      "returnType": "void",
      "params": {
        "image": "Image *"
      }
    },
    {
      "name": "ImageRotateCW",
      "description": "Rotate image clockwise 90deg",
      "returnType": "void",
      "params": {
        "image": "Image *"
      }
    },
    {
      "name": "ImageRotateCCW",
      "description": "Rotate image counter-clockwise 90deg",
      "returnType": "void",
      "params": {
        "image": "Image *"
      }
    },
    {
      "name": "ImageColorTint",
      "description": "Modify image color: tint",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "color": "Color"
      }
    },
    {
      "name": "ImageColorInvert",
      "description": "Modify image color: invert",
      "returnType": "void",
      "params": {
        "image": "Image *"
      }
    },
    {
      "name": "ImageColorGrayscale",
      "description": "Modify image color: grayscale",
      "returnType": "void",
      "params": {
        "image": "Image *"
      }
    },
    {
      "name": "ImageColorContrast",
      "description": "Modify image color: contrast (-100 to 100)",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "contrast": "float"
      }
    },
    {
      "name": "ImageColorBrightness",
      "description": "Modify image color: brightness (-255 to 255)",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "brightness": "int"
      }
    },
    {
      "name": "ImageColorReplace",
      "description": "Modify image color: replace color",
      "returnType": "void",
      "params": {
        "image": "Image *",
        "color": "Color",
        "replace": "Color"
      }
    },
    {
      "name": "LoadImageColors",
      "description": "Load color data from image as a Color array (RGBA - 32bit)",
      "returnType": "Color *",
      "params": {
        "image": "Image"
      }
    },
    {
      "name": "LoadImagePalette",
      "description": "Load colors palette from image as a Color array (RGBA - 32bit)",
      "returnType": "Color *",
      "params": {
        "image": "Image",
        "maxPaletteSize": "int",
        "colorsCount": "int *"
      }
    },
    {
      "name": "UnloadImageColors",
      "description": "Unload color data loaded with LoadImageColors()",
      "returnType": "void",
      "params": {
        "colors": "Color *"
      }
    },
    {
      "name": "UnloadImagePalette",
      "description": "Unload colors palette loaded with LoadImagePalette()",
      "returnType": "void",
      "params": {
        "colors": "Color *"
      }
    },
    {
      "name": "GetImageAlphaBorder",
      "description": "Get image alpha border rectangle",
      "returnType": "Rectangle",
      "params": {
        "image": "Image",
        "threshold": "float"
      }
    },
    {
      "name": "ImageClearBackground",
      "description": "Clear image background with given color",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "color": "Color"
      }
    },
    {
      "name": "ImageDrawPixel",
      "description": "Draw pixel within an image",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "posX": "int",
        "posY": "int",
        "color": "Color"
      }
    },
    {
      "name": "ImageDrawPixelV",
      "description": "Draw pixel within an image (Vector version)",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "position": "Vector2",
        "color": "Color"
      }
    },
    {
      "name": "ImageDrawLine",
      "description": "Draw line within an image",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "startPosX": "int",
        "startPosY": "int",
        "endPosX": "int",
        "endPosY": "int",
        "color": "Color"
      }
    },
    {
      "name": "ImageDrawLineV",
      "description": "Draw line within an image (Vector version)",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "start": "Vector2",
        "end": "Vector2",
        "color": "Color"
      }
    },
    {
      "name": "ImageDrawCircle",
      "description": "Draw circle within an image",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "centerX": "int",
        "centerY": "int",
        "radius": "int",
        "color": "Color"
      }
    },
    {
      "name": "ImageDrawCircleV",
      "description": "Draw circle within an image (Vector version)",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "center": "Vector2",
        "radius": "int",
        "color": "Color"
      }
    },
    {
      "name": "ImageDrawRectangle",
      "description": "Draw rectangle within an image",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "posX": "int",
        "posY": "int",
        "width": "int",
        "height": "int",
        "color": "Color"
      }
    },
    {
      "name": "ImageDrawRectangleV",
      "description": "Draw rectangle within an image (Vector version)",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "position": "Vector2",
        "size": "Vector2",
        "color": "Color"
      }
    },
    {
      "name": "ImageDrawRectangleRec",
      "description": "Draw rectangle within an image",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "rec": "Rectangle",
        "color": "Color"
      }
    },
    {
      "name": "ImageDrawRectangleLines",
      "description": "Draw rectangle lines within an image",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "rec": "Rectangle",
        "thick": "int",
        "color": "Color"
      }
    },
    {
      "name": "ImageDraw",
      "description": "Draw a source image within a destination image (tint applied to source)",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "src": "Image",
        "srcRec": "Rectangle",
        "dstRec": "Rectangle",
        "tint": "Color"
      }
    },
    {
      "name": "ImageDrawText",
      "description": "Draw text (using default font) within an image (destination)",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "text": "const char *",
        "posX": "int",
        "posY": "int",
        "fontSize": "int",
        "color": "Color"
      }
    },
    {
      "name": "ImageDrawTextEx",
      "description": "Draw text (custom sprite font) within an image (destination)",
      "returnType": "void",
      "params": {
        "dst": "Image *",
        "font": "Font",
        "text": "const char *",
        "position": "Vector2",
        "fontSize": "float",
        "spacing": "float",
        "tint": "Color"
      }
    },
    {
      "name": "LoadTexture",
      "description": "Load texture from file into GPU memory (VRAM)",
      "returnType": "Texture2D",
      "params": {
        "fileName": "const char *"
      }
    },
    {
      "name": "LoadTextureFromImage",
      "description": "Load texture from image data",
      "returnType": "Texture2D",
      "params": {
        "image": "Image"
      }
    },
    {
      "name": "LoadTextureCubemap",
      "description": "Load cubemap from image, multiple image cubemap layouts supported",
      "returnType": "TextureCubemap",
      "params": {
        "image": "Image",
        "layout": "int"
      }
    },
    {
      "name": "LoadRenderTexture",
      "description": "Load texture for rendering (framebuffer)",
      "returnType": "RenderTexture2D",
      "params": {
        "width": "int",
        "height": "int"
      }
    },
    {
      "name": "UnloadTexture",
      "description": "Unload texture from GPU memory (VRAM)",
      "returnType": "void",
      "params": {
        "texture": "Texture2D"
      }
    },
    {
      "name": "UnloadRenderTexture",
      "description": "Unload render texture from GPU memory (VRAM)",
      "returnType": "void",
      "params": {
        "target": "RenderTexture2D"
      }
    },
    {
      "name": "UpdateTexture",
      "description": "Update GPU texture with new data",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "pixels": "const void *"
      }
    },
    {
      "name": "UpdateTextureRec",
      "description": "Update GPU texture rectangle with new data",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "rec": "Rectangle",
        "pixels": "const void *"
      }
    },
    {
      "name": "GetTextureData",
      "description": "Get pixel data from GPU texture and return an Image",
      "returnType": "Image",
      "params": {
        "texture": "Texture2D"
      }
    },
    {
      "name": "GetScreenData",
      "description": "Get pixel data from screen buffer and return an Image (screenshot)",
      "returnType": "Image"
    },
    {
      "name": "GenTextureMipmaps",
      "description": "Generate GPU mipmaps for a texture",
      "returnType": "void",
      "params": {
        "texture": "Texture2D *"
      }
    },
    {
      "name": "SetTextureFilter",
      "description": "Set texture scaling filter mode",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "filter": "int"
      }
    },
    {
      "name": "SetTextureWrap",
      "description": "Set texture wrapping mode",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "wrap": "int"
      }
    },
    {
      "name": "DrawTexture",
      "description": "Draw a Texture2D",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "posX": "int",
        "posY": "int",
        "tint": "Color"
      }
    },
    {
      "name": "DrawTextureV",
      "description": "Draw a Texture2D with position defined as Vector2",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "position": "Vector2",
        "tint": "Color"
      }
    },
    {
      "name": "DrawTextureEx",
      "description": "Draw a Texture2D with extended parameters",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "position": "Vector2",
        "rotation": "float",
        "scale": "float",
        "tint": "Color"
      }
    },
    {
      "name": "DrawTextureRec",
      "description": "Draw a part of a texture defined by a rectangle",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "source": "Rectangle",
        "position": "Vector2",
        "tint": "Color"
      }
    },
    {
      "name": "DrawTextureQuad",
      "description": "Draw texture quad with tiling and offset parameters",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "tiling": "Vector2",
        "offset": "Vector2",
        "quad": "Rectangle",
        "tint": "Color"
      }
    },
    {
      "name": "DrawTextureTiled",
      "description": "Draw part of a texture (defined by a rectangle) with rotation and scale tiled into dest.",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "source": "Rectangle",
        "dest": "Rectangle",
        "origin": "Vector2",
        "rotation": "float",
        "scale": "float",
        "tint": "Color"
      }
    },
    {
      "name": "DrawTexturePro",
      "description": "Draw a part of a texture defined by a rectangle with 'pro' parameters",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "source": "Rectangle",
        "dest": "Rectangle",
        "origin": "Vector2",
        "rotation": "float",
        "tint": "Color"
      }
    },
    {
      "name": "DrawTextureNPatch",
      "description": "Draws a texture (or part of it) that stretches or shrinks nicely",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "nPatchInfo": "NPatchInfo",
        "dest": "Rectangle",
        "origin": "Vector2",
        "rotation": "float",
        "tint": "Color"
      }
    },
    {
      "name": "DrawTexturePoly",
      "description": "Draw a textured polygon",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "center": "Vector2",
        "points": "Vector2 *",
        "texcoords": "Vector2 *",
        "pointsCount": "int",
        "tint": "Color"
      }
    },
    {
      "name": "Fade",
      "description": "Returns color with alpha applied, alpha goes from 0.0f to 1.0f",
      "returnType": "Color",
      "params": {
        "color": "Color",
        "alpha": "float"
      }
    },
    {
      "name": "ColorToInt",
      "description": "Returns hexadecimal value for a Color",
      "returnType": "int",
      "params": {
        "color": "Color"
      }
    },
    {
      "name": "ColorNormalize",
      "description": "Returns Color normalized as float [0..1]",
      "returnType": "Vector4",
      "params": {
        "color": "Color"
      }
    },
    {
      "name": "ColorFromNormalized",
      "description": "Returns Color from normalized values [0..1]",
      "returnType": "Color",
      "params": {
        "normalized": "Vector4"
      }
    },
    {
      "name": "ColorToHSV",
      "description": "Returns HSV values for a Color, hue [0..360], saturation/value [0..1]",
      "returnType": "Vector3",
      "params": {
        "color": "Color"
      }
    },
    {
      "name": "ColorFromHSV",
      "description": "Returns a Color from HSV values, hue [0..360], saturation/value [0..1]",
      "returnType": "Color",
      "params": {
        "hue": "float",
        "saturation": "float",
        "value": "float"
      }
    },
    {
      "name": "ColorAlpha",
      "description": "Returns color with alpha applied, alpha goes from 0.0f to 1.0f",
      "returnType": "Color",
      "params": {
        "color": "Color",
        "alpha": "float"
      }
    },
    {
      "name": "ColorAlphaBlend",
      "description": "Returns src alpha-blended into dst color with tint",
      "returnType": "Color",
      "params": {
        "dst": "Color",
        "src": "Color",
        "tint": "Color"
      }
    },
    {
      "name": "GetColor",
      "description": "Get Color structure from hexadecimal value",
      "returnType": "Color",
      "params": {
        "hexValue": "int"
      }
    },
    {
      "name": "GetPixelColor",
      "description": "Get Color from a source pixel pointer of certain format",
      "returnType": "Color",
      "params": {
        "srcPtr": "void *",
        "format": "int"
      }
    },
    {
      "name": "SetPixelColor",
      "description": "Set color formatted into destination pixel pointer",
      "returnType": "void",
      "params": {
        "dstPtr": "void *",
        "color": "Color",
        "format": "int"
      }
    },
    {
      "name": "GetPixelDataSize",
      "description": "Get pixel data size in bytes for certain format",
      "returnType": "int",
      "params": {
        "width": "int",
        "height": "int",
        "format": "int"
      }
    },
    {
      "name": "GetFontDefault",
      "description": "Get the default Font",
      "returnType": "Font"
    },
    {
      "name": "LoadFont",
      "description": "Load font from file into GPU memory (VRAM)",
      "returnType": "Font",
      "params": {
        "fileName": "const char *"
      }
    },
    {
      "name": "LoadFontEx",
      "description": "Load font from file with extended parameters",
      "returnType": "Font",
      "params": {
        "fileName": "const char *",
        "fontSize": "int",
        "fontChars": "int *",
        "charsCount": "int"
      }
    },
    {
      "name": "LoadFontFromImage",
      "description": "Load font from Image (XNA style)",
      "returnType": "Font",
      "params": {
        "image": "Image",
        "key": "Color",
        "firstChar": "int"
      }
    },
    {
      "name": "LoadFontFromMemory",
      "description": "Load font from memory buffer, fileType refers to extension: i.e. \".ttf\"",
      "returnType": "Font",
      "params": {
        "fileType": "const char *",
        "fileData": "const unsigned char *",
        "dataSize": "int",
        "fontSize": "int",
        "fontChars": "int *",
        "charsCount": "int"
      }
    },
    {
      "name": "LoadFontData",
      "description": "Load font data for further use",
      "returnType": "CharInfo *",
      "params": {
        "fileData": "const unsigned char *",
        "dataSize": "int",
        "fontSize": "int",
        "fontChars": "int *",
        "charsCount": "int",
        "type": "int"
      }
    },
    {
      "name": "GenImageFontAtlas",
      "description": "Generate image font atlas using chars info",
      "returnType": "Image",
      "params": {
        "chars": "const CharInfo *",
        "recs": "Rectangle **",
        "charsCount": "int",
        "fontSize": "int",
        "padding": "int",
        "packMethod": "int"
      }
    },
    {
      "name": "UnloadFontData",
      "description": "Unload font chars info data (RAM)",
      "returnType": "void",
      "params": {
        "chars": "CharInfo *",
        "charsCount": "int"
      }
    },
    {
      "name": "UnloadFont",
      "description": "Unload Font from GPU memory (VRAM)",
      "returnType": "void",
      "params": {
        "font": "Font"
      }
    },
    {
      "name": "DrawFPS",
      "description": "Draw current FPS",
      "returnType": "void",
      "params": {
        "posX": "int",
        "posY": "int"
      }
    },
    {
      "name": "DrawText",
      "description": "Draw text (using default font)",
      "returnType": "void",
      "params": {
        "text": "const char *",
        "posX": "int",
        "posY": "int",
        "fontSize": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawTextEx",
      "description": "Draw text using font and additional parameters",
      "returnType": "void",
      "params": {
        "font": "Font",
        "text": "const char *",
        "position": "Vector2",
        "fontSize": "float",
        "spacing": "float",
        "tint": "Color"
      }
    },
    {
      "name": "DrawTextRec",
      "description": "Draw text using font inside rectangle limits",
      "returnType": "void",
      "params": {
        "font": "Font",
        "text": "const char *",
        "rec": "Rectangle",
        "fontSize": "float",
        "spacing": "float",
        "wordWrap": "bool",
        "tint": "Color"
      }
    },
    {
      "name": "DrawTextRecEx",
      "description": "",
      "returnType": "void",
      "params": {
        "font": "Font",
        "text": "const char *",
        "rec": "Rectangle",
        "fontSize": "float",
        "spacing": "float",
        "wordWrap": "bool",
        "tint": "Color"
      }
    },
    {
      "name": "DrawTextCodepoint",
      "description": "Draw one character (codepoint)",
      "returnType": "void",
      "params": {
        "font": "Font",
        "codepoint": "int",
        "position": "Vector2",
        "fontSize": "float",
        "tint": "Color"
      }
    },
    {
      "name": "MeasureText",
      "description": "Measure string width for default font",
      "returnType": "int",
      "params": {
        "text": "const char *",
        "fontSize": "int"
      }
    },
    {
      "name": "MeasureTextEx",
      "description": "Measure string size for Font",
      "returnType": "Vector2",
      "params": {
        "font": "Font",
        "text": "const char *",
        "fontSize": "float",
        "spacing": "float"
      }
    },
    {
      "name": "GetGlyphIndex",
      "description": "Get index position for a unicode character on font",
      "returnType": "int",
      "params": {
        "font": "Font",
        "codepoint": "int"
      }
    },
    {
      "name": "TextCopy",
      "description": "Copy one string to another, returns bytes copied",
      "returnType": "int",
      "params": {
        "dst": "char *",
        "src": "const char *"
      }
    },
    {
      "name": "TextIsEqual",
      "description": "Check if two text string are equal",
      "returnType": "bool",
      "params": {
        "text1": "const char *",
        "text2": "const char *"
      }
    },
    {
      "name": "TextLength",
      "description": "Get text length, checks for ' 0' ending",
      "returnType": "unsigned int",
      "params": {
        "text": "const char *"
      }
    },
    {
      "name": "TextFormat",
      "description": "Text formatting with variables (sprintf style)",
      "returnType": "const char *",
      "params": {
        "text": "const char *",
        "": ""
      }
    },
    {
      "name": "TextSubtext",
      "description": "Get a piece of a text string",
      "returnType": "const char *",
      "params": {
        "text": "const char *",
        "position": "int",
        "length": "int"
      }
    },
    {
      "name": "TextReplace",
      "description": "Replace text string (memory must be freed!)",
      "returnType": "char *",
      "params": {
        "text": "char *",
        "replace": "const char *",
        "by": "const char *"
      }
    },
    {
      "name": "TextInsert",
      "description": "Insert text in a position (memory must be freed!)",
      "returnType": "char *",
      "params": {
        "text": "const char *",
        "insert": "const char *",
        "position": "int"
      }
    },
    {
      "name": "TextJoin",
      "description": "Join text strings with delimiter",
      "returnType": "const char *",
      "params": {
        "textList": "const char **",
        "count": "int",
        "delimiter": "const char *"
      }
    },
    {
      "name": "TextSplit",
      "description": "Split text into multiple strings",
      "returnType": "const char **",
      "params": {
        "text": "const char *",
        "delimiter": "char",
        "count": "int *"
      }
    },
    {
      "name": "TextAppend",
      "description": "Append text at specific position and move cursor!",
      "returnType": "void",
      "params": {
        "text": "char *",
        "append": "const char *",
        "position": "int *"
      }
    },
    {
      "name": "TextFindIndex",
      "description": "Find first text occurrence within a string",
      "returnType": "int",
      "params": {
        "text": "const char *",
        "find": "const char *"
      }
    },
    {
      "name": "TextToUpper",
      "description": "Get upper case version of provided string",
      "returnType": "const char *",
      "params": {
        "text": "const char *"
      }
    },
    {
      "name": "TextToLower",
      "description": "Get lower case version of provided string",
      "returnType": "const char *",
      "params": {
        "text": "const char *"
      }
    },
    {
      "name": "TextToPascal",
      "description": "Get Pascal case notation version of provided string",
      "returnType": "const char *",
      "params": {
        "text": "const char *"
      }
    },
    {
      "name": "TextToInteger",
      "description": "Get integer value from text (negative values not supported)",
      "returnType": "int",
      "params": {
        "text": "const char *"
      }
    },
    {
      "name": "TextToUtf8",
      "description": "Encode text codepoint into utf8 text (memory must be freed!)",
      "returnType": "char *",
      "params": {
        "codepoints": "int *",
        "length": "int"
      }
    },
    {
      "name": "GetCodepoints",
      "description": "Get all codepoints in a string, codepoints count returned by parameters",
      "returnType": "int *",
      "params": {
        "text": "const char *",
        "count": "int *"
      }
    },
    {
      "name": "GetCodepointsCount",
      "description": "Get total number of characters (codepoints) in a UTF8 encoded string",
      "returnType": "int",
      "params": {
        "text": "const char *"
      }
    },
    {
      "name": "GetNextCodepoint",
      "description": "Returns next codepoint in a UTF8 encoded string; 0x3f('?') is returned on failure",
      "returnType": "int",
      "params": {
        "text": "const char *",
        "bytesProcessed": "int *"
      }
    },
    {
      "name": "CodepointToUtf8",
      "description": "Encode codepoint into utf8 text (char array length returned as parameter)",
      "returnType": "const char *",
      "params": {
        "codepoint": "int",
        "byteLength": "int *"
      }
    },
    {
      "name": "DrawLine3D",
      "description": "Draw a line in 3D world space",
      "returnType": "void",
      "params": {
        "startPos": "Vector3",
        "endPos": "Vector3",
        "color": "Color"
      }
    },
    {
      "name": "DrawPoint3D",
      "description": "Draw a point in 3D space, actually a small line",
      "returnType": "void",
      "params": {
        "position": "Vector3",
        "color": "Color"
      }
    },
    {
      "name": "DrawCircle3D",
      "description": "Draw a circle in 3D world space",
      "returnType": "void",
      "params": {
        "center": "Vector3",
        "radius": "float",
        "rotationAxis": "Vector3",
        "rotationAngle": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawTriangle3D",
      "description": "Draw a color-filled triangle (vertex in counter-clockwise order!)",
      "returnType": "void",
      "params": {
        "v1": "Vector3",
        "v2": "Vector3",
        "v3": "Vector3",
        "color": "Color"
      }
    },
    {
      "name": "DrawTriangleStrip3D",
      "description": "Draw a triangle strip defined by points",
      "returnType": "void",
      "params": {
        "points": "Vector3 *",
        "pointsCount": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawCube",
      "description": "Draw cube",
      "returnType": "void",
      "params": {
        "position": "Vector3",
        "width": "float",
        "height": "float",
        "length": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawCubeV",
      "description": "Draw cube (Vector version)",
      "returnType": "void",
      "params": {
        "position": "Vector3",
        "size": "Vector3",
        "color": "Color"
      }
    },
    {
      "name": "DrawCubeWires",
      "description": "Draw cube wires",
      "returnType": "void",
      "params": {
        "position": "Vector3",
        "width": "float",
        "height": "float",
        "length": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawCubeWiresV",
      "description": "Draw cube wires (Vector version)",
      "returnType": "void",
      "params": {
        "position": "Vector3",
        "size": "Vector3",
        "color": "Color"
      }
    },
    {
      "name": "DrawCubeTexture",
      "description": "Draw cube textured",
      "returnType": "void",
      "params": {
        "texture": "Texture2D",
        "position": "Vector3",
        "width": "float",
        "height": "float",
        "length": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawSphere",
      "description": "Draw sphere",
      "returnType": "void",
      "params": {
        "centerPos": "Vector3",
        "radius": "float",
        "color": "Color"
      }
    },
    {
      "name": "DrawSphereEx",
      "description": "Draw sphere with extended parameters",
      "returnType": "void",
      "params": {
        "centerPos": "Vector3",
        "radius": "float",
        "rings": "int",
        "slices": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawSphereWires",
      "description": "Draw sphere wires",
      "returnType": "void",
      "params": {
        "centerPos": "Vector3",
        "radius": "float",
        "rings": "int",
        "slices": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawCylinder",
      "description": "Draw a cylinder/cone",
      "returnType": "void",
      "params": {
        "position": "Vector3",
        "radiusTop": "float",
        "radiusBottom": "float",
        "height": "float",
        "slices": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawCylinderWires",
      "description": "Draw a cylinder/cone wires",
      "returnType": "void",
      "params": {
        "position": "Vector3",
        "radiusTop": "float",
        "radiusBottom": "float",
        "height": "float",
        "slices": "int",
        "color": "Color"
      }
    },
    {
      "name": "DrawPlane",
      "description": "Draw a plane XZ",
      "returnType": "void",
      "params": {
        "centerPos": "Vector3",
        "size": "Vector2",
        "color": "Color"
      }
    },
    {
      "name": "DrawRay",
      "description": "Draw a ray line",
      "returnType": "void",
      "params": {
        "ray": "Ray",
        "color": "Color"
      }
    },
    {
      "name": "DrawGrid",
      "description": "Draw a grid (centered at (0, 0, 0))",
      "returnType": "void",
      "params": {
        "slices": "int",
        "spacing": "float"
      }
    },
    {
      "name": "LoadModel",
      "description": "Load model from files (meshes and materials)",
      "returnType": "Model",
      "params": {
        "fileName": "const char *"
      }
    },
    {
      "name": "LoadModelFromMesh",
      "description": "Load model from generated mesh (default material)",
      "returnType": "Model",
      "params": {
        "mesh": "Mesh"
      }
    },
    {
      "name": "UnloadModel",
      "description": "Unload model (including meshes) from memory (RAM and/or VRAM)",
      "returnType": "void",
      "params": {
        "model": "Model"
      }
    },
    {
      "name": "UnloadModelKeepMeshes",
      "description": "Unload model (but not meshes) from memory (RAM and/or VRAM)",
      "returnType": "void",
      "params": {
        "model": "Model"
      }
    },
    {
      "name": "UploadMesh",
      "description": "Upload mesh vertex data in GPU and provide VAO/VBO ids",
      "returnType": "void",
      "params": {
        "mesh": "Mesh *",
        "dynamic": "bool"
      }
    },
    {
      "name": "UpdateMeshBuffer",
      "description": "Update mesh vertex data in GPU for a specific buffer index",
      "returnType": "void",
      "params": {
        "mesh": "Mesh",
        "index": "int",
        "data": "void *",
        "dataSize": "int",
        "offset": "int"
      }
    },
    {
      "name": "DrawMesh",
      "description": "Draw a 3d mesh with material and transform",
      "returnType": "void",
      "params": {
        "mesh": "Mesh",
        "material": "Material",
        "transform": "Matrix"
      }
    },
    {
      "name": "DrawMeshInstanced",
      "description": "Draw multiple mesh instances with material and different transforms",
      "returnType": "void",
      "params": {
        "mesh": "Mesh",
        "material": "Material",
        "transforms": "Matrix *",
        "instances": "int"
      }
    },
    {
      "name": "UnloadMesh",
      "description": "Unload mesh data from CPU and GPU",
      "returnType": "void",
      "params": {
        "mesh": "Mesh"
      }
    },
    {
      "name": "ExportMesh",
      "description": "Export mesh data to file, returns true on success",
      "returnType": "bool",
      "params": {
        "mesh": "Mesh",
        "fileName": "const char *"
      }
    },
    {
      "name": "LoadMaterials",
      "description": "Load materials from model file",
      "returnType": "Material *",
      "params": {
        "fileName": "const char *",
        "materialCount": "int *"
      }
    },
    {
      "name": "LoadMaterialDefault",
      "description": "Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)",
      "returnType": "Material"
    },
    {
      "name": "UnloadMaterial",
      "description": "Unload material from GPU memory (VRAM)",
      "returnType": "void",
      "params": {
        "material": "Material"
      }
    },
    {
      "name": "SetMaterialTexture",
      "description": "Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)",
      "returnType": "void",
      "params": {
        "material": "Material *",
        "mapType": "int",
        "texture": "Texture2D"
      }
    },
    {
      "name": "SetModelMeshMaterial",
      "description": "Set material for a mesh",
      "returnType": "void",
      "params": {
        "model": "Model *",
        "meshId": "int",
        "materialId": "int"
      }
    },
    {
      "name": "LoadModelAnimations",
      "description": "Load model animations from file",
      "returnType": "ModelAnimation *",
      "params": {
        "fileName": "const char *",
        "animsCount": "int *"
      }
    },
    {
      "name": "UpdateModelAnimation",
      "description": "Update model animation pose",
      "returnType": "void",
      "params": {
        "model": "Model",
        "anim": "ModelAnimation",
        "frame": "int"
      }
    },
    {
      "name": "UnloadModelAnimation",
      "description": "Unload animation data",
      "returnType": "void",
      "params": {
        "anim": "ModelAnimation"
      }
    },
    {
      "name": "UnloadModelAnimations",
      "description": "Unload animation array data",
      "returnType": "void",
      "params": {
        "animations": "ModelAnimation*",
        "count": "unsigned int"
      }
    },
    {
      "name": "IsModelAnimationValid",
      "description": "Check model animation skeleton match",
      "returnType": "bool",
      "params": {
        "model": "Model",
        "anim": "ModelAnimation"
      }
    },
    {
      "name": "GenMeshPoly",
      "description": "Generate polygonal mesh",
      "returnType": "Mesh",
      "params": {
        "sides": "int",
        "radius": "float"
      }
    },
    {
      "name": "GenMeshPlane",
      "description": "Generate plane mesh (with subdivisions)",
      "returnType": "Mesh",
      "params": {
        "width": "float",
        "length": "float",
        "resX": "int",
        "resZ": "int"
      }
    },
    {
      "name": "GenMeshCube",
      "description": "Generate cuboid mesh",
      "returnType": "Mesh",
      "params": {
        "width": "float",
        "height": "float",
        "length": "float"
      }
    },
    {
      "name": "GenMeshSphere",
      "description": "Generate sphere mesh (standard sphere)",
      "returnType": "Mesh",
      "params": {
        "radius": "float",
        "rings": "int",
        "slices": "int"
      }
    },
    {
      "name": "GenMeshHemiSphere",
      "description": "Generate half-sphere mesh (no bottom cap)",
      "returnType": "Mesh",
      "params": {
        "radius": "float",
        "rings": "int",
        "slices": "int"
      }
    },
    {
      "name": "GenMeshCylinder",
      "description": "Generate cylinder mesh",
      "returnType": "Mesh",
      "params": {
        "radius": "float",
        "height": "float",
        "slices": "int"
      }
    },
    {
      "name": "GenMeshTorus",
      "description": "Generate torus mesh",
      "returnType": "Mesh",
      "params": {
        "radius": "float",
        "size": "float",
        "radSeg": "int",
        "sides": "int"
      }
    },
    {
      "name": "GenMeshKnot",
      "description": "Generate trefoil knot mesh",
      "returnType": "Mesh",
      "params": {
        "radius": "float",
        "size": "float",
        "radSeg": "int",
        "sides": "int"
      }
    },
    {
      "name": "GenMeshHeightmap",
      "description": "Generate heightmap mesh from image data",
      "returnType": "Mesh",
      "params": {
        "heightmap": "Image",
        "size": "Vector3"
      }
    },
    {
      "name": "GenMeshCubicmap",
      "description": "Generate cubes-based map mesh from image data",
      "returnType": "Mesh",
      "params": {
        "cubicmap": "Image",
        "cubeSize": "Vector3"
      }
    },
    {
      "name": "MeshBoundingBox",
      "description": "Compute mesh bounding box limits",
      "returnType": "BoundingBox",
      "params": {
        "mesh": "Mesh"
      }
    },
    {
      "name": "MeshTangents",
      "description": "Compute mesh tangents",
      "returnType": "void",
      "params": {
        "mesh": "Mesh *"
      }
    },
    {
      "name": "MeshBinormals",
      "description": "Compute mesh binormals",
      "returnType": "void",
      "params": {
        "mesh": "Mesh *"
      }
    },
    {
      "name": "DrawModel",
      "description": "Draw a model (with texture if set)",
      "returnType": "void",
      "params": {
        "model": "Model",
        "position": "Vector3",
        "scale": "float",
        "tint": "Color"
      }
    },
    {
      "name": "DrawModelEx",
      "description": "Draw a model with extended parameters",
      "returnType": "void",
      "params": {
        "model": "Model",
        "position": "Vector3",
        "rotationAxis": "Vector3",
        "rotationAngle": "float",
        "scale": "Vector3",
        "tint": "Color"
      }
    },
    {
      "name": "DrawModelWires",
      "description": "Draw a model wires (with texture if set)",
      "returnType": "void",
      "params": {
        "model": "Model",
        "position": "Vector3",
        "scale": "float",
        "tint": "Color"
      }
    },
    {
      "name": "DrawModelWiresEx",
      "description": "Draw a model wires (with texture if set) with extended parameters",
      "returnType": "void",
      "params": {
        "model": "Model",
        "position": "Vector3",
        "rotationAxis": "Vector3",
        "rotationAngle": "float",
        "scale": "Vector3",
        "tint": "Color"
      }
    },
    {
      "name": "DrawBoundingBox",
      "description": "Draw bounding box (wires)",
      "returnType": "void",
      "params": {
        "box": "BoundingBox",
        "color": "Color"
      }
    },
    {
      "name": "DrawBillboard",
      "description": "Draw a billboard texture",
      "returnType": "void",
      "params": {
        "camera": "Camera",
        "texture": "Texture2D",
        "center": "Vector3",
        "size": "float",
        "tint": "Color"
      }
    },
    {
      "name": "DrawBillboardRec",
      "description": "Draw a billboard texture defined by source",
      "returnType": "void",
      "params": {
        "camera": "Camera",
        "texture": "Texture2D",
        "source": "Rectangle",
        "center": "Vector3",
        "size": "float",
        "tint": "Color"
      }
    },
    {
      "name": "CheckCollisionSpheres",
      "description": "Detect collision between two spheres",
      "returnType": "bool",
      "params": {
        "center1": "Vector3",
        "radius1": "float",
        "center2": "Vector3",
        "radius2": "float"
      }
    },
    {
      "name": "CheckCollisionBoxes",
      "description": "Detect collision between two bounding boxes",
      "returnType": "bool",
      "params": {
        "box1": "BoundingBox",
        "box2": "BoundingBox"
      }
    },
    {
      "name": "CheckCollisionBoxSphere",
      "description": "Detect collision between box and sphere",
      "returnType": "bool",
      "params": {
        "box": "BoundingBox",
        "center": "Vector3",
        "radius": "float"
      }
    },
    {
      "name": "CheckCollisionRaySphere",
      "description": "Detect collision between ray and sphere",
      "returnType": "bool",
      "params": {
        "ray": "Ray",
        "center": "Vector3",
        "radius": "float"
      }
    },
    {
      "name": "CheckCollisionRaySphereEx",
      "description": "Detect collision between ray and sphere, returns collision point",
      "returnType": "bool",
      "params": {
        "ray": "Ray",
        "center": "Vector3",
        "radius": "float",
        "collisionPoint": "Vector3 *"
      }
    },
    {
      "name": "CheckCollisionRayBox",
      "description": "Detect collision between ray and box",
      "returnType": "bool",
      "params": {
        "ray": "Ray",
        "box": "BoundingBox"
      }
    },
    {
      "name": "GetCollisionRayMesh",
      "description": "Get collision info between ray and mesh",
      "returnType": "RayHitInfo",
      "params": {
        "ray": "Ray",
        "mesh": "Mesh",
        "transform": "Matrix"
      }
    },
    {
      "name": "GetCollisionRayModel",
      "description": "Get collision info between ray and model",
      "returnType": "RayHitInfo",
      "params": {
        "ray": "Ray",
        "model": "Model"
      }
    },
    {
      "name": "GetCollisionRayTriangle",
      "description": "Get collision info between ray and triangle",
      "returnType": "RayHitInfo",
      "params": {
        "ray": "Ray",
        "p1": "Vector3",
        "p2": "Vector3",
        "p3": "Vector3"
      }
    },
    {
      "name": "GetCollisionRayGround",
      "description": "Get collision info between ray and ground plane (Y-normal plane)",
      "returnType": "RayHitInfo",
      "params": {
        "ray": "Ray",
        "groundHeight": "float"
      }
    },
    {
      "name": "InitAudioDevice",
      "description": "Initialize audio device and context",
      "returnType": "void"
    },
    {
      "name": "CloseAudioDevice",
      "description": "Close the audio device and context",
      "returnType": "void"
    },
    {
      "name": "IsAudioDeviceReady",
      "description": "Check if audio device has been initialized successfully",
      "returnType": "bool"
    },
    {
      "name": "SetMasterVolume",
      "description": "Set master volume (listener)",
      "returnType": "void",
      "params": {
        "volume": "float"
      }
    },
    {
      "name": "LoadWave",
      "description": "Load wave data from file",
      "returnType": "Wave",
      "params": {
        "fileName": "const char *"
      }
    },
    {
      "name": "LoadWaveFromMemory",
      "description": "Load wave from memory buffer, fileType refers to extension: i.e. \".wav\"",
      "returnType": "Wave",
      "params": {
        "fileType": "const char *",
        "fileData": "const unsigned char *",
        "dataSize": "int"
      }
    },
    {
      "name": "LoadSound",
      "description": "Load sound from file",
      "returnType": "Sound",
      "params": {
        "fileName": "const char *"
      }
    },
    {
      "name": "LoadSoundFromWave",
      "description": "Load sound from wave data",
      "returnType": "Sound",
      "params": {
        "wave": "Wave"
      }
    },
    {
      "name": "UpdateSound",
      "description": "Update sound buffer with new data",
      "returnType": "void",
      "params": {
        "sound": "Sound",
        "data": "const void *",
        "samplesCount": "int"
      }
    },
    {
      "name": "UnloadWave",
      "description": "Unload wave data",
      "returnType": "void",
      "params": {
        "wave": "Wave"
      }
    },
    {
      "name": "UnloadSound",
      "description": "Unload sound",
      "returnType": "void",
      "params": {
        "sound": "Sound"
      }
    },
    {
      "name": "ExportWave",
      "description": "Export wave data to file, returns true on success",
      "returnType": "bool",
      "params": {
        "wave": "Wave",
        "fileName": "const char *"
      }
    },
    {
      "name": "ExportWaveAsCode",
      "description": "Export wave sample data to code (.h), returns true on success",
      "returnType": "bool",
      "params": {
        "wave": "Wave",
        "fileName": "const char *"
      }
    },
    {
      "name": "PlaySound",
      "description": "Play a sound",
      "returnType": "void",
      "params": {
        "sound": "Sound"
      }
    },
    {
      "name": "StopSound",
      "description": "Stop playing a sound",
      "returnType": "void",
      "params": {
        "sound": "Sound"
      }
    },
    {
      "name": "PauseSound",
      "description": "Pause a sound",
      "returnType": "void",
      "params": {
        "sound": "Sound"
      }
    },
    {
      "name": "ResumeSound",
      "description": "Resume a paused sound",
      "returnType": "void",
      "params": {
        "sound": "Sound"
      }
    },
    {
      "name": "PlaySoundMulti",
      "description": "Play a sound (using multichannel buffer pool)",
      "returnType": "void",
      "params": {
        "sound": "Sound"
      }
    },
    {
      "name": "StopSoundMulti",
      "description": "Stop any sound playing (using multichannel buffer pool)",
      "returnType": "void"
    },
    {
      "name": "GetSoundsPlaying",
      "description": "Get number of sounds playing in the multichannel",
      "returnType": "int"
    },
    {
      "name": "IsSoundPlaying",
      "description": "Check if a sound is currently playing",
      "returnType": "bool",
      "params": {
        "sound": "Sound"
      }
    },
    {
      "name": "SetSoundVolume",
      "description": "Set volume for a sound (1.0 is max level)",
      "returnType": "void",
      "params": {
        "sound": "Sound",
        "volume": "float"
      }
    },
    {
      "name": "SetSoundPitch",
      "description": "Set pitch for a sound (1.0 is base level)",
      "returnType": "void",
      "params": {
        "sound": "Sound",
        "pitch": "float"
      }
    },
    {
      "name": "WaveFormat",
      "description": "Convert wave data to desired format",
      "returnType": "void",
      "params": {
        "wave": "Wave *",
        "sampleRate": "int",
        "sampleSize": "int",
        "channels": "int"
      }
    },
    {
      "name": "WaveCopy",
      "description": "Copy a wave to a new wave",
      "returnType": "Wave",
      "params": {
        "wave": "Wave"
      }
    },
    {
      "name": "WaveCrop",
      "description": "Crop a wave to defined samples range",
      "returnType": "void",
      "params": {
        "wave": "Wave *",
        "initSample": "int",
        "finalSample": "int"
      }
    },
    {
      "name": "LoadWaveSamples",
      "description": "Load samples data from wave as a floats array",
      "returnType": "float *",
      "params": {
        "wave": "Wave"
      }
    },
    {
      "name": "UnloadWaveSamples",
      "description": "Unload samples data loaded with LoadWaveSamples()",
      "returnType": "void",
      "params": {
        "samples": "float *"
      }
    },
    {
      "name": "LoadMusicStream",
      "description": "Load music stream from file",
      "returnType": "Music",
      "params": {
        "fileName": "const char *"
      }
    },
    {
      "name": "LoadMusicStreamFromMemory",
      "description": "Load music stream from data",
      "returnType": "Music",
      "params": {
        "fileType": "const char *",
        "data": "unsigned char*",
        "dataSize": "int"
      }
    },
    {
      "name": "UnloadMusicStream",
      "description": "Unload music stream",
      "returnType": "void",
      "params": {
        "music": "Music"
      }
    },
    {
      "name": "PlayMusicStream",
      "description": "Start music playing",
      "returnType": "void",
      "params": {
        "music": "Music"
      }
    },
    {
      "name": "IsMusicPlaying",
      "description": "Check if music is playing",
      "returnType": "bool",
      "params": {
        "music": "Music"
      }
    },
    {
      "name": "UpdateMusicStream",
      "description": "Updates buffers for music streaming",
      "returnType": "void",
      "params": {
        "music": "Music"
      }
    },
    {
      "name": "StopMusicStream",
      "description": "Stop music playing",
      "returnType": "void",
      "params": {
        "music": "Music"
      }
    },
    {
      "name": "PauseMusicStream",
      "description": "Pause music playing",
      "returnType": "void",
      "params": {
        "music": "Music"
      }
    },
    {
      "name": "ResumeMusicStream",
      "description": "Resume playing paused music",
      "returnType": "void",
      "params": {
        "music": "Music"
      }
    },
    {
      "name": "SetMusicVolume",
      "description": "Set volume for music (1.0 is max level)",
      "returnType": "void",
      "params": {
        "music": "Music",
        "volume": "float"
      }
    },
    {
      "name": "SetMusicPitch",
      "description": "Set pitch for a music (1.0 is base level)",
      "returnType": "void",
      "params": {
        "music": "Music",
        "pitch": "float"
      }
    },
    {
      "name": "GetMusicTimeLength",
      "description": "Get music time length (in seconds)",
      "returnType": "float",
      "params": {
        "music": "Music"
      }
    },
    {
      "name": "GetMusicTimePlayed",
      "description": "Get current music time played (in seconds)",
      "returnType": "float",
      "params": {
        "music": "Music"
      }
    },
    {
      "name": "InitAudioStream",
      "description": "Init audio stream (to stream raw audio pcm data)",
      "returnType": "AudioStream",
      "params": {
        "sampleRate": "unsigned int",
        "sampleSize": "unsigned int",
        "channels": "unsigned int"
      }
    },
    {
      "name": "UpdateAudioStream",
      "description": "Update audio stream buffers with data",
      "returnType": "void",
      "params": {
        "stream": "AudioStream",
        "data": "const void *",
        "samplesCount": "int"
      }
    },
    {
      "name": "CloseAudioStream",
      "description": "Close audio stream and free memory",
      "returnType": "void",
      "params": {
        "stream": "AudioStream"
      }
    },
    {
      "name": "IsAudioStreamProcessed",
      "description": "Check if any audio stream buffers requires refill",
      "returnType": "bool",
      "params": {
        "stream": "AudioStream"
      }
    },
    {
      "name": "PlayAudioStream",
      "description": "Play audio stream",
      "returnType": "void",
      "params": {
        "stream": "AudioStream"
      }
    },
    {
      "name": "PauseAudioStream",
      "description": "Pause audio stream",
      "returnType": "void",
      "params": {
        "stream": "AudioStream"
      }
    },
    {
      "name": "ResumeAudioStream",
      "description": "Resume audio stream",
      "returnType": "void",
      "params": {
        "stream": "AudioStream"
      }
    },
    {
      "name": "IsAudioStreamPlaying",
      "description": "Check if audio stream is playing",
      "returnType": "bool",
      "params": {
        "stream": "AudioStream"
      }
    },
    {
      "name": "StopAudioStream",
      "description": "Stop audio stream",
      "returnType": "void",
      "params": {
        "stream": "AudioStream"
      }
    },
    {
      "name": "SetAudioStreamVolume",
      "description": "Set volume for audio stream (1.0 is max level)",
      "returnType": "void",
      "params": {
        "stream": "AudioStream",
        "volume": "float"
      }
    },
    {
      "name": "SetAudioStreamPitch",
      "description": "Set pitch for audio stream (1.0 is base level)",
      "returnType": "void",
      "params": {
        "stream": "AudioStream",
        "pitch": "float"
      }
    },
    {
      "name": "SetAudioStreamBufferSizeDefault",
      "description": "Default size for new audio streams",
      "returnType": "void",
      "params": {
        "size": "int"
      }
    }
  ]
}
