diff --git a/src/c/functions/raylib_functions.ml b/src/c/functions/raylib_functions.ml
index df3f81a..b193868 100644
--- a/src/c/functions/raylib_functions.ml
+++ b/src/c/functions/raylib_functions.ml
@@ -35,13 +35,13 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "IsWindowResized" (void @-> returning bool)
 
   let is_window_state =
-    foreign "IsWindowState" (uint @-> returning bool)
+    foreign "IsWindowState" (ConfigFlags.t @-> returning bool)
 
   let set_window_state =
-    foreign "SetWindowState" (uint @-> returning void)
+    foreign "SetWindowState" (ConfigFlags.t_bitmask @-> returning void)
 
   let clear_window_state =
-    foreign "ClearWindowState" (uint @-> returning void)
+    foreign "ClearWindowState" (ConfigFlags.t_bitmask @-> returning void)
 
   let toggle_fullscreen =
     foreign "ToggleFullscreen" (void @-> returning void)
@@ -74,7 +74,7 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "SetWindowSize" (int @-> int @-> returning void)
 
   let get_window_handle =
-    foreign "GetWindowHandle" (void @-> returning ptr void)
+    foreign "GetWindowHandle" (void @-> returning (ptr_opt void))
 
   let get_screen_width =
     foreign "GetScreenWidth" (void @-> returning int)
@@ -119,7 +119,7 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "SetClipboardText" (string @-> returning void)
 
   let get_clipboard_text =
-    foreign "GetClipboardText" (void @-> returning string)
+    foreign "GetClipboardText" (void @-> returning string_opt)
 
   let show_cursor =
     foreign "ShowCursor" (void @-> returning void)
@@ -148,16 +148,16 @@ module Description (F : Ctypes.FOREIGN) = struct
   let end_drawing =
     foreign "EndDrawing" (void @-> returning void)
 
-  let begin_mode2_d =
+  let begin_mode_2d =
     foreign "BeginMode2D" (Camera2D.t @-> returning void)
 
-  let end_mode2_d =
+  let end_mode_2d =
     foreign "EndMode2D" (void @-> returning void)
 
-  let begin_mode3_d =
+  let begin_mode_3d =
     foreign "BeginMode3D" (Camera3D.t @-> returning void)
 
-  let end_mode3_d =
+  let end_mode_3d =
     foreign "EndMode3D" (void @-> returning void)
 
   let begin_texture_mode =
@@ -173,7 +173,7 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "EndShaderMode" (void @-> returning void)
 
   let begin_blend_mode =
-    foreign "BeginBlendMode" (int @-> returning void)
+    foreign "BeginBlendMode" (BlendMode.t @-> returning void)
 
   let end_blend_mode =
     foreign "EndBlendMode" (void @-> returning void)
@@ -209,10 +209,10 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "GetShaderLocationAttrib" (Shader.t @-> string @-> returning int)
 
   let set_shader_value =
-    foreign "SetShaderValue" (Shader.t @-> int @-> ptr const void @-> int @-> returning void)
+    foreign "SetShaderValue" (Shader.t @-> int @-> ptr void @-> ShaderUniformDataType.t @-> returning void)
 
   let set_shader_value_v =
-    foreign "SetShaderValueV" (Shader.t @-> int @-> ptr const void @-> int @-> int @-> returning void)
+    foreign "SetShaderValueV" (Shader.t @-> int @-> ptr void @-> ShaderUniformDataType.t @-> int @-> returning void)
 
   let set_shader_value_matrix =
     foreign "SetShaderValueMatrix" (Shader.t @-> int @-> Matrix.t @-> returning void)
@@ -229,7 +229,7 @@ module Description (F : Ctypes.FOREIGN) = struct
   let get_camera_matrix =
     foreign "GetCameraMatrix" (Camera3D.t @-> returning Matrix.t)
 
-  let get_camera_matrix2_d =
+  let get_camera_matrix_2d =
     foreign "GetCameraMatrix2D" (Camera2D.t @-> returning Matrix.t)
 
   let get_world_to_screen =
@@ -238,10 +238,10 @@ module Description (F : Ctypes.FOREIGN) = struct
   let get_world_to_screen_ex =
     foreign "GetWorldToScreenEx" (Vector3.t @-> Camera3D.t @-> int @-> int @-> returning Vector2.t)
 
-  let get_world_to_screen2_d =
+  let get_world_to_screen_2d =
     foreign "GetWorldToScreen2D" (Vector2.t @-> Camera2D.t @-> returning Vector2.t)
 
-  let get_screen_to_world2_d =
+  let get_screen_to_world_2d =
     foreign "GetScreenToWorld2D" (Vector2.t @-> Camera2D.t @-> returning Vector2.t)
 
   let set_target_fps =
@@ -266,13 +266,13 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "SetConfigFlags" (uint @-> returning void)
 
   let trace_log =
-    foreign "TraceLog" (int @-> string @->  @-> returning void)
+    foreign "TraceLog" (int @-> string @-> returning void)
 
   let set_trace_log_level =
-    foreign "SetTraceLogLevel" (int @-> returning void)
+    foreign "SetTraceLogLevel" (TraceLogLevel.t @-> returning void)
 
   let mem_alloc =
-    foreign "MemAlloc" (int @-> returning ptr void)
+    foreign "MemAlloc" (int @-> returning (ptr void))
 
   let mem_realloc =
     foreign "MemRealloc" (ptr void @-> int @-> returning ptr void)
@@ -280,38 +280,35 @@ module Description (F : Ctypes.FOREIGN) = struct
   let mem_free =
     foreign "MemFree" (ptr void @-> returning void)
 
-  let set_trace_log_callback =
-    foreign "SetTraceLogCallback" (trace_log_callback @-> returning void)
+  (* let set_trace_log_callback =
+   *   foreign "SetTraceLogCallback" (trace_log_callback @-> returning void) *)
 
-  let set_load_file_data_callback =
-    foreign "SetLoadFileDataCallback" (load_file_data_callback @-> returning void)
+  (* let set_load_file_data_callback =
+   *   foreign "SetLoadFileDataCallback" (load_file_data_callback @-> returning void)
+   *
+   * let set_save_file_data_callback =
+   *   foreign "SetSaveFileDataCallback" (save_file_data_callback @-> returning void)
+   *
+   * let set_load_file_text_callback =
+   *   foreign "SetLoadFileTextCallback" (load_file_text_callback @-> returning void)
+   *
+   * let set_save_file_text_callback =
+   *   foreign "SetSaveFileTextCallback" (save_file_text_callback @-> returning void) *)
 
-  let set_save_file_data_callback =
-    foreign "SetSaveFileDataCallback" (save_file_data_callback @-> returning void)
+  let _load_file_data =
+    foreign "LoadFileData" (string @-> ptr uint @-> returning (ptr uchar))
 
-  let set_load_file_text_callback =
-    foreign "SetLoadFileTextCallback" (load_file_text_callback @-> returning void)
+  let unload_file_data = foreign "UnloadFileData" (string @-> returning void)
 
-  let set_save_file_text_callback =
-    foreign "SetSaveFileTextCallback" (save_file_text_callback @-> returning void)
+  let _save_file_data =
+    foreign "SaveFileData" (string @-> ptr void @-> int @-> returning bool)
 
-  let load_file_data =
-    foreign "LoadFileData" (string @-> ptr uint @-> returning ptr uchar)
+  let load_file_text = foreign "LoadFileText" (string @-> returning string)
 
-  let unload_file_data =
-    foreign "UnloadFileData" (ptr uchar @-> returning void)
-
-  let save_file_data =
-    foreign "SaveFileData" (string @-> ptr void @-> uint @-> returning bool)
-
-  let load_file_text =
-    foreign "LoadFileText" (string @-> returning ptr char)
-
-  let unload_file_text =
-    foreign "UnloadFileText" (ptr uchar @-> returning void)
+  let unload_file_text = foreign "UnloadFileText" (string @-> returning void)
 
   let save_file_text =
-    foreign "SaveFileText" (string @-> ptr char @-> returning bool)
+    foreign "SaveFileText" (string @-> string @-> returning bool)
 
   let file_exists =
     foreign "FileExists" (string @-> returning bool)
@@ -325,8 +322,7 @@ module Description (F : Ctypes.FOREIGN) = struct
   let get_file_extension =
     foreign "GetFileExtension" (string @-> returning string)
 
-  let get_file_name =
-    foreign "GetFileName" (string @-> returning string)
+  let get_file_name = foreign "GetFileName" (string @-> returning string)
 
   let get_file_name_without_ext =
     foreign "GetFileNameWithoutExt" (string @-> returning string)
@@ -340,8 +336,8 @@ module Description (F : Ctypes.FOREIGN) = struct
   let get_working_directory =
     foreign "GetWorkingDirectory" (void @-> returning string)
 
-  let get_directory_files =
-    foreign "GetDirectoryFiles" (string @-> ptr int @-> returning ptr ptr char)
+  let _get_directory_files =
+    foreign "GetDirectoryFiles" (string @-> ptr int @-> returning (ptr string))
 
   let clear_directory_files =
     foreign "ClearDirectoryFiles" (void @-> returning void)
@@ -352,8 +348,8 @@ module Description (F : Ctypes.FOREIGN) = struct
   let is_file_dropped =
     foreign "IsFileDropped" (void @-> returning bool)
 
-  let get_dropped_files =
-    foreign "GetDroppedFiles" (ptr int @-> returning ptr ptr char)
+  let _get_dropped_files =
+    foreign "GetDroppedFiles" (ptr int @-> returning (ptr string))
 
   let clear_dropped_files =
     foreign "ClearDroppedFiles" (void @-> returning void)
@@ -361,86 +357,86 @@ module Description (F : Ctypes.FOREIGN) = struct
   let get_file_mod_time =
     foreign "GetFileModTime" (string @-> returning long)
 
-  let compress_data =
-    foreign "CompressData" (ptr uchar @-> int @-> ptr int @-> returning ptr uchar)
+  let _compress_data =
+    foreign "CompressData" (ptr uchar @-> int @-> ptr int @-> returning (ptr uchar))
 
-  let decompress_data =
-    foreign "DecompressData" (ptr uchar @-> int @-> ptr int @-> returning ptr uchar)
+  let _decompress_data =
+    foreign "DecompressData" (ptr uchar @-> int @-> ptr int @-> returning (ptr uchar))
 
   let save_storage_value =
-    foreign "SaveStorageValue" (uint @-> int @-> returning bool)
+    foreign "SaveStorageValue" (int @-> int @-> returning bool)
 
   let load_storage_value =
-    foreign "LoadStorageValue" (uint @-> returning int)
+    foreign "LoadStorageValue" (int @-> returning int)
 
   let open_url =
     foreign "OpenURL" (string @-> returning void)
 
   let is_key_pressed =
-    foreign "IsKeyPressed" (int @-> returning bool)
+    foreign "IsKeyPressed" (Key.t @-> returning bool)
 
   let is_key_down =
-    foreign "IsKeyDown" (int @-> returning bool)
+    foreign "IsKeyDown" (Key.t @-> returning bool)
 
   let is_key_released =
-    foreign "IsKeyReleased" (int @-> returning bool)
+    foreign "IsKeyReleased" (Key.t @-> returning bool)
 
   let is_key_up =
-    foreign "IsKeyUp" (int @-> returning bool)
+    foreign "IsKeyUp" (Key.t @-> returning bool)
 
   let set_exit_key =
-    foreign "SetExitKey" (int @-> returning void)
+    foreign "SetExitKey" (Key.t @-> returning void)
 
   let get_key_pressed =
-    foreign "GetKeyPressed" (void @-> returning int)
+    foreign "GetKeyPressed" (void @-> returning Key.t)
 
   let get_char_pressed =
     foreign "GetCharPressed" (void @-> returning int)
 
   let is_gamepad_available =
-    foreign "IsGamepadAvailable" (int @-> returning bool)
+    foreign "IsGamepadAvailable" (GamepadNumber.t @-> returning bool)
 
   let is_gamepad_name =
-    foreign "IsGamepadName" (int @-> string @-> returning bool)
+    foreign "IsGamepadName" (GamepadNumber.t @-> string @-> returning bool)
 
   let get_gamepad_name =
-    foreign "GetGamepadName" (int @-> returning string)
+    foreign "GetGamepadName" (GamepadNumber.t @-> returning string)
 
   let is_gamepad_button_pressed =
-    foreign "IsGamepadButtonPressed" (int @-> int @-> returning bool)
+    foreign "IsGamepadButtonPressed" (GamepadNumber.t @-> GamepadButton.t @-> returning bool)
 
   let is_gamepad_button_down =
-    foreign "IsGamepadButtonDown" (int @-> int @-> returning bool)
+    foreign "IsGamepadButtonDown" (GamepadNumber.t @-> GamepadButton.t @-> returning bool)
 
   let is_gamepad_button_released =
-    foreign "IsGamepadButtonReleased" (int @-> int @-> returning bool)
+    foreign "IsGamepadButtonReleased" (GamepadNumber.t @-> GamepadButton.t @-> returning bool)
 
   let is_gamepad_button_up =
-    foreign "IsGamepadButtonUp" (int @-> int @-> returning bool)
+    foreign "IsGamepadButtonUp" (GamepadNumber.t @-> GamepadButton.t @-> returning bool)
 
   let get_gamepad_button_pressed =
-    foreign "GetGamepadButtonPressed" (void @-> returning int)
+    foreign "GetGamepadButtonPressed" (void @-> returning GamepadButton.t)
 
   let get_gamepad_axis_count =
-    foreign "GetGamepadAxisCount" (int @-> returning int)
+    foreign "GetGamepadAxisCount" (GamepadNumber.t @-> returning GamepadButton.t)
 
   let get_gamepad_axis_movement =
-    foreign "GetGamepadAxisMovement" (int @-> int @-> returning float)
+    foreign "GetGamepadAxisMovement" (GamepadNumber.t @-> GamepadAxis.t @-> returning float)
 
-  let set_gamepad_mappings =
-    foreign "SetGamepadMappings" (string @-> returning int)
+  (* let set_gamepad_mappings =
+   *   foreign "SetGamepadMappings" (string @-> returning int) *)
 
   let is_mouse_button_pressed =
-    foreign "IsMouseButtonPressed" (int @-> returning bool)
+    foreign "IsMouseButtonPressed" (MouseButton.t @-> returning bool)
 
   let is_mouse_button_down =
-    foreign "IsMouseButtonDown" (int @-> returning bool)
+    foreign "IsMouseButtonDown" (MouseButton.t @-> returning bool)
 
   let is_mouse_button_released =
-    foreign "IsMouseButtonReleased" (int @-> returning bool)
+    foreign "IsMouseButtonReleased" (MouseButton.t @-> returning bool)
 
   let is_mouse_button_up =
-    foreign "IsMouseButtonUp" (int @-> returning bool)
+    foreign "IsMouseButtonUp" (MouseButton.t @-> returning bool)
 
   let get_mouse_x =
     foreign "GetMouseX" (void @-> returning int)
@@ -464,7 +460,7 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "GetMouseWheelMove" (void @-> returning float)
 
   let set_mouse_cursor =
-    foreign "SetMouseCursor" (int @-> returning void)
+    foreign "SetMouseCursor" (MouseCursor.t @-> returning void)
 
   let get_touch_x =
     foreign "GetTouchX" (void @-> returning int)
@@ -476,13 +472,13 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "GetTouchPosition" (int @-> returning Vector2.t)
 
   let set_gestures_enabled =
-    foreign "SetGesturesEnabled" (uint @-> returning void)
+    foreign "SetGesturesEnabled" (Gestures.t_bitmask @-> returning void)
 
   let is_gesture_detected =
-    foreign "IsGestureDetected" (int @-> returning bool)
+    foreign "IsGestureDetected" (Gestures.t @-> returning bool)
 
   let get_gesture_detected =
-    foreign "GetGestureDetected" (void @-> returning int)
+    foreign "GetGestureDetected" (void @-> returning Gestures.t)
 
   let get_touch_points_count =
     foreign "GetTouchPointsCount" (void @-> returning int)
@@ -503,22 +499,23 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "GetGesturePinchAngle" (void @-> returning float)
 
   let set_camera_mode =
-    foreign "SetCameraMode" (Camera3D.t @-> int @-> returning void)
+    foreign "SetCameraMode" (Camera3D.t @-> CameraMode.t @-> returning void)
 
-  let update_camera =
-    foreign "UpdateCamera" (ptr Camera3D.t @-> returning void)
+  let update_camera = foreign "UpdateCamera" (ptr Camera3D.t @-> returning void)
 
   let set_camera_pan_control =
-    foreign "SetCameraPanControl" (int @-> returning void)
+    foreign "SetCameraPanControl" (Key.t @-> returning void)
 
   let set_camera_alt_control =
-    foreign "SetCameraAltControl" (int @-> returning void)
+    foreign "SetCameraAltControl" (Key.t @-> returning void)
 
   let set_camera_smooth_zoom_control =
-    foreign "SetCameraSmoothZoomControl" (int @-> returning void)
+    foreign "SetCameraSmoothZoomControl" (Key.t @-> returning void)
 
   let set_camera_move_controls =
-    foreign "SetCameraMoveControls" (int @-> int @-> int @-> int @-> int @-> int @-> returning void)
+    foreign "SetCameraMoveControls"
+      (Key.t @-> Key.t @-> Key.t @-> Key.t @-> Key.t @-> Key.t
+     @-> returning void)
 
   let set_shapes_texture =
     foreign "SetShapesTexture" (Texture.t @-> Rectangle.t @-> returning void)
@@ -656,13 +653,13 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "LoadImage" (string @-> returning Image.t)
 
   let load_image_raw =
-    foreign "LoadImageRaw" (string @-> int @-> int @-> int @-> int @-> returning Image.t)
+    foreign "LoadImageRaw" (string @-> int @-> int @-> PixelFormat.t @-> int @-> returning Image.t)
 
   let load_image_anim =
     foreign "LoadImageAnim" (string @-> ptr int @-> returning Image.t)
 
   let load_image_from_memory =
-    foreign "LoadImageFromMemory" (string @-> ptr const uchar @-> int @-> returning Image.t)
+    foreign "LoadImageFromMemory" (string @-> ptr uchar @-> int @-> returning Image.t)
 
   let unload_image =
     foreign "UnloadImage" (Image.t @-> returning void)
@@ -677,28 +674,32 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "GenImageColor" (int @-> int @-> Color.t @-> returning Image.t)
 
   let gen_image_gradient_v =
-    foreign "GenImageGradientV" (int @-> int @-> Color.t @-> Color.t @-> returning Image.t)
+    foreign "GenImageGradientV"
+      (int @-> int @-> Color.t @-> Color.t @-> returning Image.t)
 
   let gen_image_gradient_h =
-    foreign "GenImageGradientH" (int @-> int @-> Color.t @-> Color.t @-> returning Image.t)
+    foreign "GenImageGradientH"
+      (int @-> int @-> Color.t @-> Color.t @-> returning Image.t)
 
   let gen_image_gradient_radial =
-    foreign "GenImageGradientRadial" (int @-> int @-> float @-> Color.t @-> Color.t @-> returning Image.t)
+    foreign "GenImageGradientRadial"
+      (int @-> int @-> float @-> Color.t @-> Color.t @-> returning Image.t)
 
   let gen_image_checked =
-    foreign "GenImageChecked" (int @-> int @-> int @-> int @-> Color.t @-> Color.t @-> returning Image.t)
+    foreign "GenImageChecked"
+      (int @-> int @-> int @-> int @-> Color.t @-> Color.t @-> returning Image.t)
 
   let gen_image_white_noise =
     foreign "GenImageWhiteNoise" (int @-> int @-> float @-> returning Image.t)
 
   let gen_image_perlin_noise =
-    foreign "GenImagePerlinNoise" (int @-> int @-> int @-> int @-> float @-> returning Image.t)
+    foreign "GenImagePerlinNoise"
+      (int @-> int @-> int @-> int @-> float @-> returning Image.t)
 
   let gen_image_cellular =
     foreign "GenImageCellular" (int @-> int @-> int @-> returning Image.t)
 
-  let image_copy =
-    foreign "ImageCopy" (Image.t @-> returning Image.t)
+  let image_copy = foreign "ImageCopy" (Image.t @-> returning Image.t)
 
   let image_from_image =
     foreign "ImageFromImage" (Image.t @-> Rectangle.t @-> returning Image.t)
@@ -707,7 +708,8 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "ImageText" (string @-> int @-> Color.t @-> returning Image.t)
 
   let image_text_ex =
-    foreign "ImageTextEx" (Font.t @-> string @-> float @-> float @-> Color.t @-> returning Image.t)
+    foreign "ImageTextEx"
+      (Font.t @-> string @-> float @-> float @-> Color.t @-> returning Image.t)
 
   let image_format =
     foreign "ImageFormat" (ptr Image.t @-> int @-> returning void)
@@ -722,7 +724,8 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "ImageAlphaCrop" (ptr Image.t @-> float @-> returning void)
 
   let image_alpha_clear =
-    foreign "ImageAlphaClear" (ptr Image.t @-> Color.t @-> float @-> returning void)
+    foreign "ImageAlphaClear"
+      (ptr Image.t @-> Color.t @-> float @-> returning void)
 
   let image_alpha_mask =
     foreign "ImageAlphaMask" (ptr Image.t @-> Image.t @-> returning void)
@@ -737,13 +740,15 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "ImageResizeNN" (ptr Image.t @-> int @-> int @-> returning void)
 
   let image_resize_canvas =
-    foreign "ImageResizeCanvas" (ptr Image.t @-> int @-> int @-> int @-> int @-> Color.t @-> returning void)
+    foreign "ImageResizeCanvas"
+      (ptr Image.t @-> int @-> int @-> int @-> int @-> Color.t
+     @-> returning void)
 
-  let image_mipmaps =
-    foreign "ImageMipmaps" (ptr Image.t @-> returning void)
+  let image_mipmaps = foreign "ImageMipmaps" (ptr Image.t @-> returning void)
 
   let image_dither =
-    foreign "ImageDither" (ptr Image.t @-> int @-> int @-> int @-> int @-> returning void)
+    foreign "ImageDither"
+      (ptr Image.t @-> int @-> int @-> int @-> int @-> returning void)
 
   let image_flip_vertical =
     foreign "ImageFlipVertical" (ptr Image.t @-> returning void)
@@ -751,8 +756,7 @@ module Description (F : Ctypes.FOREIGN) = struct
   let image_flip_horizontal =
     foreign "ImageFlipHorizontal" (ptr Image.t @-> returning void)
 
-  let image_rotate_cw =
-    foreign "ImageRotateCW" (ptr Image.t @-> returning void)
+  let image_rotate_cw = foreign "ImageRotateCW" (ptr Image.t @-> returning void)
 
   let image_rotate_ccw =
     foreign "ImageRotateCCW" (ptr Image.t @-> returning void)
@@ -773,13 +777,15 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "ImageColorBrightness" (ptr Image.t @-> int @-> returning void)
 
   let image_color_replace =
-    foreign "ImageColorReplace" (ptr Image.t @-> Color.t @-> Color.t @-> returning void)
+    foreign "ImageColorReplace"
+      (ptr Image.t @-> Color.t @-> Color.t @-> returning void)
 
   let load_image_colors =
-    foreign "LoadImageColors" (Image.t @-> returning ptr Color.t)
+    foreign "LoadImageColors" (Image.t @-> returning (ptr Color.t))
 
   let load_image_palette =
-    foreign "LoadImagePalette" (Image.t @-> int @-> ptr int @-> returning ptr Color.t)
+    foreign "LoadImagePalette"
+      (Image.t @-> int @-> ptr int @-> returning (ptr Color.t))
 
   let unload_image_colors =
     foreign "UnloadImageColors" (ptr Color.t @-> returning void)
@@ -794,46 +800,63 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "ImageClearBackground" (ptr Image.t @-> Color.t @-> returning void)
 
   let image_draw_pixel =
-    foreign "ImageDrawPixel" (ptr Image.t @-> int @-> int @-> Color.t @-> returning void)
+    foreign "ImageDrawPixel"
+      (ptr Image.t @-> int @-> int @-> Color.t @-> returning void)
 
   let image_draw_pixel_v =
-    foreign "ImageDrawPixelV" (ptr Image.t @-> Vector2.t @-> Color.t @-> returning void)
+    foreign "ImageDrawPixelV"
+      (ptr Image.t @-> Vector2.t @-> Color.t @-> returning void)
 
   let image_draw_line =
-    foreign "ImageDrawLine" (ptr Image.t @-> int @-> int @-> int @-> int @-> Color.t @-> returning void)
+    foreign "ImageDrawLine"
+      (ptr Image.t @-> int @-> int @-> int @-> int @-> Color.t
+     @-> returning void)
 
   let image_draw_line_v =
-    foreign "ImageDrawLineV" (ptr Image.t @-> Vector2.t @-> Vector2.t @-> Color.t @-> returning void)
+    foreign "ImageDrawLineV"
+      (ptr Image.t @-> Vector2.t @-> Vector2.t @-> Color.t @-> returning void)
 
   let image_draw_circle =
-    foreign "ImageDrawCircle" (ptr Image.t @-> int @-> int @-> int @-> Color.t @-> returning void)
+    foreign "ImageDrawCircle"
+      (ptr Image.t @-> int @-> int @-> int @-> Color.t @-> returning void)
 
   let image_draw_circle_v =
-    foreign "ImageDrawCircleV" (ptr Image.t @-> Vector2.t @-> int @-> Color.t @-> returning void)
+    foreign "ImageDrawCircleV"
+      (ptr Image.t @-> Vector2.t @-> int @-> Color.t @-> returning void)
 
   let image_draw_rectangle =
-    foreign "ImageDrawRectangle" (ptr Image.t @-> int @-> int @-> int @-> int @-> Color.t @-> returning void)
+    foreign "ImageDrawRectangle"
+      (ptr Image.t @-> int @-> int @-> int @-> int @-> Color.t
+     @-> returning void)
 
   let image_draw_rectangle_v =
-    foreign "ImageDrawRectangleV" (ptr Image.t @-> Vector2.t @-> Vector2.t @-> Color.t @-> returning void)
+    foreign "ImageDrawRectangleV"
+      (ptr Image.t @-> Vector2.t @-> Vector2.t @-> Color.t @-> returning void)
 
   let image_draw_rectangle_rec =
-    foreign "ImageDrawRectangleRec" (ptr Image.t @-> Rectangle.t @-> Color.t @-> returning void)
+    foreign "ImageDrawRectangleRec"
+      (ptr Image.t @-> Rectangle.t @-> Color.t @-> returning void)
 
   let image_draw_rectangle_lines =
-    foreign "ImageDrawRectangleLines" (ptr Image.t @-> Rectangle.t @-> int @-> Color.t @-> returning void)
+    foreign "ImageDrawRectangleLines"
+      (ptr Image.t @-> Rectangle.t @-> int @-> Color.t @-> returning void)
 
   let image_draw =
-    foreign "ImageDraw" (ptr Image.t @-> Image.t @-> Rectangle.t @-> Rectangle.t @-> Color.t @-> returning void)
+    foreign "ImageDraw"
+      (ptr Image.t @-> Image.t @-> Rectangle.t @-> Rectangle.t @-> Color.t
+     @-> returning void)
 
   let image_draw_text =
-    foreign "ImageDrawText" (ptr Image.t @-> string @-> int @-> int @-> int @-> Color.t @-> returning void)
+    foreign "ImageDrawText"
+      (ptr Image.t @-> string @-> int @-> int @-> int @-> Color.t
+     @-> returning void)
 
   let image_draw_text_ex =
-    foreign "ImageDrawTextEx" (ptr Image.t @-> Font.t @-> string @-> Vector2.t @-> float @-> float @-> Color.t @-> returning void)
+    foreign "ImageDrawTextEx"
+      (ptr Image.t @-> Font.t @-> string @-> Vector2.t @-> float @-> float
+     @-> Color.t @-> returning void)
 
-  let load_texture =
-    foreign "LoadTexture" (string @-> returning Texture.t)
+  let load_texture = foreign "LoadTexture" (string @-> returning Texture.t)
 
   let load_texture_from_image =
     foreign "LoadTextureFromImage" (Image.t @-> returning Texture.t)
@@ -866,10 +889,10 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "GenTextureMipmaps" (ptr Texture.t @-> returning void)
 
   let set_texture_filter =
-    foreign "SetTextureFilter" (Texture.t @-> int @-> returning void)
+    foreign "SetTextureFilter" (Texture.t @-> TextureFilter.t @-> returning void)
 
   let set_texture_wrap =
-    foreign "SetTextureWrap" (Texture.t @-> int @-> returning void)
+    foreign "SetTextureWrap" (Texture.t @-> TextureWrap.t @-> returning void)
 
   let draw_texture =
     foreign "DrawTexture" (Texture.t @-> int @-> int @-> Color.t @-> returning void)
@@ -910,8 +933,7 @@ module Description (F : Ctypes.FOREIGN) = struct
   let color_from_normalized =
     foreign "ColorFromNormalized" (Vector4.t @-> returning Color.t)
 
-  let color_to_hsv =
-    foreign "ColorToHSV" (Color.t @-> returning Vector3.t)
+  let color_to_hsv = foreign "ColorToHSV" (Color.t @-> returning Vector3.t)
 
   let color_from_hsv =
     foreign "ColorFromHSV" (float @-> float @-> float @-> returning Color.t)
@@ -920,124 +942,131 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "ColorAlpha" (Color.t @-> float @-> returning Color.t)
 
   let color_alpha_blend =
-    foreign "ColorAlphaBlend" (Color.t @-> Color.t @-> Color.t @-> returning Color.t)
+    foreign "ColorAlphaBlend"
+      (Color.t @-> Color.t @-> Color.t @-> returning Color.t)
 
-  let get_color =
-    foreign "GetColor" (int @-> returning Color.t)
+  let get_color = foreign "GetColor" (int @-> returning Color.t)
 
   let get_pixel_color =
-    foreign "GetPixelColor" (ptr void @-> int @-> returning Color.t)
+    foreign "GetPixelColor" (ptr void @-> PixelFormat.t @-> returning Color.t)
 
   let set_pixel_color =
-    foreign "SetPixelColor" (ptr void @-> Color.t @-> int @-> returning void)
+    foreign "SetPixelColor"
+      (ptr void @-> Color.t @-> PixelFormat.t @-> returning void)
 
   let get_pixel_data_size =
-    foreign "GetPixelDataSize" (int @-> int @-> int @-> returning int)
+    foreign "GetPixelDataSize" (int @-> int @-> PixelFormat.t @-> returning int)
 
-  let get_font_default =
-    foreign "GetFontDefault" (void @-> returning Font.t)
+  let get_font_default = foreign "GetFontDefault" (void @-> returning Font.t)
 
-  let load_font =
-    foreign "LoadFont" (string @-> returning Font.t)
+  let load_font = foreign "LoadFont" (string @-> returning Font.t)
 
   let load_font_ex =
-    foreign "LoadFontEx" (string @-> int @-> ptr int @-> int @-> returning Font.t)
+    foreign "LoadFontEx"
+      (string @-> int @-> ptr int @-> int @-> returning Font.t)
 
   let load_font_from_image =
-    foreign "LoadFontFromImage" (Image.t @-> Color.t @-> int @-> returning Font.t)
+    foreign "LoadFontFromImage"
+      (Image.t @-> Color.t @-> int @-> returning Font.t)
 
   let load_font_from_memory =
-    foreign "LoadFontFromMemory" (string @-> ptr const uchar @-> int @-> int @-> ptr int @-> int @-> returning Font.t)
+    foreign "LoadFontFromMemory"
+      (string @-> ptr uchar @-> int @-> int @-> ptr int @-> int
+     @-> returning Font.t)
 
   let load_font_data =
-    foreign "LoadFontData" (ptr const uchar @-> int @-> int @-> ptr int @-> int @-> int @-> returning ptr CharInfo.t)
+    foreign "LoadFontData"
+      (ptr uchar @-> int @-> int @-> ptr int @-> int @-> int
+      @-> returning (ptr CharInfo.t))
 
   let gen_image_font_atlas =
-    foreign "GenImageFontAtlas" (ptr const _char_info @-> ptr ptr Rectangle.t @-> int @-> int @-> int @-> int @-> returning Image.t)
+    foreign "GenImageFontAtlas"
+      (ptr CharInfo.t
+      @-> ptr (ptr Rectangle.t)
+      @-> int @-> int @-> int @-> int @-> returning Image.t)
 
   let unload_font_data =
     foreign "UnloadFontData" (ptr CharInfo.t @-> int @-> returning void)
 
-  let unload_font =
-    foreign "UnloadFont" (Font.t @-> returning void)
+  let unload_font = foreign "UnloadFont" (Font.t @-> returning void)
 
-  let draw_fps =
-    foreign "DrawFPS" (int @-> int @-> returning void)
+  let draw_fps = foreign "DrawFPS" (int @-> int @-> returning void)
 
   let draw_text =
-    foreign "DrawText" (string @-> int @-> int @-> int @-> Color.t @-> returning void)
+    foreign "DrawText"
+      (string @-> int @-> int @-> int @-> Color.t @-> returning void)
 
   let draw_text_ex =
-    foreign "DrawTextEx" (Font.t @-> string @-> Vector2.t @-> float @-> float @-> Color.t @-> returning void)
+    foreign "DrawTextEx"
+      (Font.t @-> string @-> Vector2.t @-> float @-> float @-> Color.t
+     @-> returning void)
 
   let draw_text_rec =
-    foreign "DrawTextRec" (Font.t @-> string @-> Rectangle.t @-> float @-> float @-> bool @-> Color.t @-> returning void)
+    foreign "DrawTextRec"
+      (Font.t @-> string @-> Rectangle.t @-> float @-> float @-> bool
+     @-> Color.t @-> returning void)
 
   let draw_text_rec_ex =
-    foreign "DrawTextRecEx" (Font.t @-> string @-> Rectangle.t @-> float @-> float @-> bool @-> Color.t @-> returning void)
+    foreign "DrawTextRecEx"
+      (Font.t @-> string @-> Rectangle.t @-> float @-> float @-> bool
+     @-> Color.t @-> int @-> int @-> Color.t @-> Color.t @-> returning void)
 
   let draw_text_codepoint =
-    foreign "DrawTextCodepoint" (Font.t @-> int @-> Vector2.t @-> float @-> Color.t @-> returning void)
+    foreign "DrawTextCodepoint"
+      (Font.t @-> int @-> Vector2.t @-> float @-> Color.t @-> returning void)
 
-  let measure_text =
-    foreign "MeasureText" (string @-> int @-> returning int)
+  let measure_text = foreign "MeasureText" (string @-> int @-> returning int)
 
   let measure_text_ex =
-    foreign "MeasureTextEx" (Font.t @-> string @-> float @-> float @-> returning Vector2.t)
+    foreign "MeasureTextEx"
+      (Font.t @-> string @-> float @-> float @-> returning Vector2.t)
 
   let get_glyph_index =
     foreign "GetGlyphIndex" (Font.t @-> int @-> returning int)
 
-  let text_copy =
-    foreign "TextCopy" (ptr char @-> string @-> returning int)
+  let text_copy = foreign "TextCopy" (string @-> string @-> returning int)
 
   let text_is_equal =
     foreign "TextIsEqual" (string @-> string @-> returning bool)
 
-  let text_length =
-    foreign "TextLength" (string @-> returning uint)
+  let text_length = foreign "TextLength" (string @-> returning int)
 
-  let text_format =
-    foreign "TextFormat" (string @->  @-> returning string)
+  (* let text_format =
+   *   foreign "TextFormat" (string @->  @-> returning string) *)
 
   let text_subtext =
     foreign "TextSubtext" (string @-> int @-> int @-> returning string)
 
   let text_replace =
-    foreign "TextReplace" (ptr char @-> string @-> string @-> returning ptr char)
+    foreign "TextReplace" (string @-> string @-> string @-> returning string)
 
   let text_insert =
-    foreign "TextInsert" (string @-> string @-> int @-> returning ptr char)
-
-  let text_join =
-    foreign "TextJoin" (ptr ptr const char @-> int @-> string @-> returning string)
+    foreign "TextInsert" (string @-> string @-> int @-> returning string)
 
-  let text_split =
-    foreign "TextSplit" (string @-> char @-> ptr int @-> returning ptr ptr const char)
+  (* let text_join =
+   *   foreign "TextJoin" (ptr ptr const char @-> int @-> string @-> returning string)
+   *
+   * let text_split =
+   *   foreign "TextSplit" (string @-> char @-> ptr int @-> returning ptr ptr const char) *)
 
   let text_append =
-    foreign "TextAppend" (ptr char @-> string @-> ptr int @-> returning void)
+    foreign "TextAppend" (string @-> string @-> ptr int @-> returning void)
 
   let text_find_index =
     foreign "TextFindIndex" (string @-> string @-> returning int)
 
-  let text_to_upper =
-    foreign "TextToUpper" (string @-> returning string)
+  let text_to_upper = foreign "TextToUpper" (string @-> returning string)
 
-  let text_to_lower =
-    foreign "TextToLower" (string @-> returning string)
+  let text_to_lower = foreign "TextToLower" (string @-> returning string)
 
-  let text_to_pascal =
-    foreign "TextToPascal" (string @-> returning string)
+  let text_to_pascal = foreign "TextToPascal" (string @-> returning string)
 
-  let text_to_integer =
-    foreign "TextToInteger" (string @-> returning int)
+  let text_to_integer = foreign "TextToInteger" (string @-> returning int)
 
-  let text_to_utf8 =
-    foreign "TextToUtf8" (ptr int @-> int @-> returning ptr char)
+  let text_to_utf8 = foreign "TextToUtf8" (ptr int @-> int @-> returning string)
 
   let get_codepoints =
-    foreign "GetCodepoints" (string @-> ptr int @-> returning ptr int)
+    foreign "GetCodepoints" (string @-> ptr int @-> returning (ptr int))
 
   let get_codepoints_count =
     foreign "GetCodepointsCount" (string @-> returning int)
@@ -1048,19 +1077,19 @@ module Description (F : Ctypes.FOREIGN) = struct
   let codepoint_to_utf8 =
     foreign "CodepointToUtf8" (int @-> ptr int @-> returning string)
 
-  let draw_line3_d =
+  let draw_line_3d =
     foreign "DrawLine3D" (Vector3.t @-> Vector3.t @-> Color.t @-> returning void)
 
-  let draw_point3_d =
+  let draw_point_3d =
     foreign "DrawPoint3D" (Vector3.t @-> Color.t @-> returning void)
 
-  let draw_circle3_d =
+  let draw_circle_3d =
     foreign "DrawCircle3D" (Vector3.t @-> float @-> Vector3.t @-> float @-> Color.t @-> returning void)
 
-  let draw_triangle3_d =
+  let draw_triangle_3d =
     foreign "DrawTriangle3D" (Vector3.t @-> Vector3.t @-> Vector3.t @-> Color.t @-> returning void)
 
-  let draw_triangle_strip3_d =
+  let draw_triangle_strip_3d =
     foreign "DrawTriangleStrip3D" (ptr Vector3.t @-> int @-> Color.t @-> returning void)
 
   let draw_cube =
@@ -1147,8 +1176,8 @@ module Description (F : Ctypes.FOREIGN) = struct
   let set_model_mesh_material =
     foreign "SetModelMeshMaterial" (ptr Model.t @-> int @-> int @-> returning void)
 
-  let load_model_animations =
-    foreign "LoadModelAnimations" (string @-> ptr int @-> returning ptr ModelAnimation.t)
+  let _load_model_animations =
+    foreign "LoadModelAnimations" (string @-> ptr int @-> returning (ptr ModelAnimation.t))
 
   let update_model_animation =
     foreign "UpdateModelAnimation" (Model.t @-> ModelAnimation.t @-> int @-> returning void)
@@ -1156,8 +1185,8 @@ module Description (F : Ctypes.FOREIGN) = struct
   let unload_model_animation =
     foreign "UnloadModelAnimation" (ModelAnimation.t @-> returning void)
 
-  let unload_model_animations =
-    foreign "UnloadModelAnimations" (model_animation* @-> uint @-> returning void)
+  let _unload_model_animations =
+    foreign "UnloadModelAnimations" (ptr ModelAnimation.t @-> int @-> returning void)
 
   let is_model_animation_valid =
     foreign "IsModelAnimationValid" (Model.t @-> ModelAnimation.t @-> returning bool)
@@ -1268,7 +1297,7 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "LoadWave" (string @-> returning Wave.t)
 
   let load_wave_from_memory =
-    foreign "LoadWaveFromMemory" (string @-> ptr const uchar @-> int @-> returning Wave.t)
+    foreign "LoadWaveFromMemory" (string @-> ptr uchar @-> int @-> returning Wave.t)
 
   let load_sound =
     foreign "LoadSound" (string @-> returning Sound.t)
@@ -1277,7 +1306,7 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "LoadSoundFromWave" (Wave.t @-> returning Sound.t)
 
   let update_sound =
-    foreign "UpdateSound" (Sound.t @-> ptr const void @-> int @-> returning void)
+    foreign "UpdateSound" (Sound.t @-> ptr void @-> int @-> returning void)
 
   let unload_wave =
     foreign "UnloadWave" (Wave.t @-> returning void)
@@ -1324,14 +1353,13 @@ module Description (F : Ctypes.FOREIGN) = struct
   let wave_format =
     foreign "WaveFormat" (ptr Wave.t @-> int @-> int @-> int @-> returning void)
 
-  let wave_copy =
-    foreign "WaveCopy" (Wave.t @-> returning Wave.t)
+  let wave_copy = foreign "WaveCopy" (Wave.t @-> returning Wave.t)
 
   let wave_crop =
     foreign "WaveCrop" (ptr Wave.t @-> int @-> int @-> returning void)
 
   let load_wave_samples =
-    foreign "LoadWaveSamples" (Wave.t @-> returning ptr float)
+    foreign "LoadWaveSamples" (Wave.t @-> returning (ptr float))
 
   let unload_wave_samples =
     foreign "UnloadWaveSamples" (ptr float @-> returning void)
@@ -1340,7 +1368,7 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "LoadMusicStream" (string @-> returning Music.t)
 
   let load_music_stream_from_memory =
-    foreign "LoadMusicStreamFromMemory" (string @-> uchar* @-> int @-> returning Music.t)
+    foreign "LoadMusicStreamFromMemory" (string @-> ptr uchar @-> int @-> returning Music.t)
 
   let unload_music_stream =
     foreign "UnloadMusicStream" (Music.t @-> returning void)
@@ -1348,8 +1376,7 @@ module Description (F : Ctypes.FOREIGN) = struct
   let play_music_stream =
     foreign "PlayMusicStream" (Music.t @-> returning void)
 
-  let is_music_playing =
-    foreign "IsMusicPlaying" (Music.t @-> returning bool)
+  let is_music_playing = foreign "IsMusicPlaying" (Music.t @-> returning bool)
 
   let update_music_stream =
     foreign "UpdateMusicStream" (Music.t @-> returning void)
@@ -1376,10 +1403,11 @@ module Description (F : Ctypes.FOREIGN) = struct
     foreign "GetMusicTimePlayed" (Music.t @-> returning float)
 
   let init_audio_stream =
-    foreign "InitAudioStream" (uint @-> uint @-> uint @-> returning AudioStream.t)
+    foreign "InitAudioStream" (int @-> int @-> int @-> returning AudioStream.t)
 
   let update_audio_stream =
-    foreign "UpdateAudioStream" (AudioStream.t @-> ptr const void @-> int @-> returning void)
+    foreign "UpdateAudioStream"
+      (AudioStream.t @-> ptr void @-> int @-> returning void)
 
   let close_audio_stream =
     foreign "CloseAudioStream" (AudioStream.t @-> returning void)
@@ -1410,3 +1438,4 @@ module Description (F : Ctypes.FOREIGN) = struct
 
   let set_audio_stream_buffer_size_default =
     foreign "SetAudioStreamBufferSizeDefault" (int @-> returning void)
+end
